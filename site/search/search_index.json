{"config":{"lang":["en"],"separator":"[\\s\\-\\.]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PRISM Documentation","text":"<p> Python-based Research Infrastructure for Structural Modeling A comprehensive toolkit for molecular dynamics analysis and visualization </p> <p> </p>"},{"location":"#overview","title":"Overview","text":"<p>PRISM is a powerful Python framework designed for molecular dynamics (MD) analysis, developed at the Institute of Quantitative Biology, Zhejiang University and Theoretical Chemistry Institute, University of Wisconsin-Madison. It provides researchers with an intuitive and efficient platform for analyzing MD trajectories, computing structural properties, and visualizing molecular systems.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<p>Install PRISM using pip:</p> <pre><code>pip install prism-md\n</code></pre> <p>Or install from source:</p> <pre><code>git clone https://github.com/your-username/PRISM.git\ncd PRISM\npip install -e .\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<ol> <li>Using GAFF (default):</li> </ol> <pre><code>prism protein.pdb ligand.mol2 -o output_dir\n</code></pre> <ol> <li>Using OpenFF:</li> </ol> <pre><code>prism protein.pdb ligand.sdf -o output_dir --ligand-forcefield openff\n</code></pre> <ol> <li>With custom configuration:</li> </ol> <pre><code>prism protein.pdb ligand.mol2 -o output_dir --config my_config.yaml\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"\ud83d\udcc8 Trajectory Analysis <p>Comprehensive tools for analyzing molecular dynamics trajectories including RMSD, RMSF, radius of gyration, and more.</p> \ud83d\udd2c Structural Analysis <p>Calculate radial distribution functions, hydrogen bonds, salt bridges, and other structural properties.</p> \ud83c\udfaf Atom Selection <p>Powerful and flexible atom selection language for precise analysis of molecular systems.</p> \ud83d\udcca Data Visualization <p>Built-in plotting functions for creating publication-quality figures and interactive visualizations.</p> \u2699\ufe0f Format Support <p>Support for common MD formats including PDB, DCD, XTC, TRR, and more.</p> \ud83d\udd04 Workflow Integration <p>Seamlessly integrate with popular MD packages like GROMACS, AMBER, and NAMD.</p>"},{"location":"#core-modules","title":"Core Modules","text":""},{"location":"#model-module","title":"Model Module","text":""},{"location":"#analysis-module","title":"Analysis Module","text":"<p>The analysis module provides comprehensive tools for trajectory analysis:</p> <ul> <li>Geometric Analysis: RMSD, RMSF, radius of gyration, end-to-end distance</li> <li>Structural Analysis: RDF, hydrogen bonds, contacts, secondary structure</li> <li>Dynamic Analysis: MSD, diffusion coefficients, autocorrelation functions</li> </ul>"},{"location":"#visualization-module","title":"Visualization Module","text":"<p>Advanced visualization capabilities:</p> <ul> <li>3D Rendering: Interactive molecular visualization with customizable representations</li> <li>2D Plots: Publication-ready plots with matplotlib integration</li> <li>Animation: Create trajectory animations and movies</li> </ul>"},{"location":"#selection-module","title":"Selection Module","text":"<p>Flexible atom selection system:</p> <ul> <li>Basic Selections: By name, type, residue, chain</li> <li>Advanced Selections: Distance-based, geometric selections</li> <li>Custom Selections: Define your own selection criteria</li> </ul>"},{"location":"#system-requirements","title":"System Requirements","text":"<ul> <li>Python: 3.8 or higher</li> <li>Memory: 4 GB RAM minimum (8 GB recommended)</li> <li>Operating System: Linux, macOS, Windows 10+</li> <li>Optional: CUDA-capable GPU for acceleration</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Getting Started: Installation and basic usage</li> <li>User Guide: Comprehensive feature documentation</li> <li>Tutorials: Step-by-step guides and examples</li> <li>API Reference: Complete API documentation</li> <li>Examples: Real-world use cases and scripts</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details on how to get started.</p>"},{"location":"#development","title":"Development","text":"<pre><code># Clone repository\ngit clone https://github.com/your-username/PRISM.git\ncd PRISM\n\n# Install in development mode\npip install -e .[dev]\n\n# Run tests\npytest tests/\n</code></pre>"},{"location":"#citation","title":"Citation","text":"<p>If you use PRISM in your research, please cite:</p> <pre><code>@software{prism2024,\n  author = {Shi, Zhaoqi},\n  title = {PRISM: Python-based Research Infrastructure for Structural Modeling},\n  year = {2024},\n  institution = {Theoretical Chemistry Institute, University of Wisconsin-Madison},\n  url = {https://github.com/your-username/PRISM}\n}\n</code></pre>"},{"location":"#support","title":"Support","text":"<ul> <li>Documentation: https://prism-docs.github.io</li> <li>Issue Tracker: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> <li>Email: zhaoqi.shi@wisc.edu</li> </ul>"},{"location":"#license","title":"License","text":"<p>PRISM is released under the MIT License.</p> <p> Developed at   Theoretical Chemistry Institute   University of Wisconsin-Madison Author: Zhaoqi Shi </p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to PRISM! This guide will help you get up and running with PRISM quickly and efficiently.</p>"},{"location":"getting-started/#what-youll-learn","title":"\ud83c\udfaf What You'll Learn","text":"<p>This section covers everything you need to know to start using PRISM:</p> <ul> <li> <p> Installation</p> <p>System requirements, installation methods, and verification steps</p> </li> <li> <p> Quick Start</p> <p>Your first PRISM analysis in under 5 minutes</p> </li> <li> <p> Basic Concepts</p> <p>Understanding PRISM's core concepts and architecture</p> </li> </ul>"},{"location":"getting-started/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Python 3.8 or higher installed on your system</li> <li>Basic knowledge of Python programming</li> <li>Molecular dynamics data (optional, we provide sample data)</li> </ul>"},{"location":"getting-started/#quick-start-path","title":"\ud83d\ude80 Quick Start Path","text":"<p>If you're eager to get started, follow this quick path:</p> <ol> <li> <p>Install PRISM using pip:    <pre><code>pip install prism-md\n</code></pre></p> </li> <li> <p>Verify installation:    <pre><code>import prism\nprint(prism.__version__)\n</code></pre></p> </li> <li> <p>Run your first analysis:    <pre><code>from prism.examples import load_sample_data\nfrom prism.analysis import quick_analysis\n\n# Load sample data\ntraj = load_sample_data('protein')\n\n# Run quick analysis\nresults = quick_analysis(traj)\nresults.summary()\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#learning-resources","title":"\ud83d\udcda Learning Resources","text":""},{"location":"getting-started/#for-beginners","title":"For Beginners","text":"<p>New to Molecular Dynamics?</p> <p>If you're new to molecular dynamics analysis, we recommend:</p> <ol> <li>Start with the Basic Concepts guide</li> <li>Follow the Basic Tutorial</li> <li>Explore Simple Examples</li> </ol>"},{"location":"getting-started/#for-experienced-users","title":"For Experienced Users","text":"<p>Coming from other MD tools?</p> <p>If you're experienced with tools like MDAnalysis or MDTraj:</p> <ul> <li>Check our Migration Guide</li> <li>Jump to Advanced Analysis</li> <li>Explore the API Reference</li> </ul>"},{"location":"getting-started/#tutorial-pathway","title":"\ud83c\udf93 Tutorial Pathway","text":"<p>We recommend following this learning pathway:</p> <pre><code>graph LR\n    A[Installation] --&gt; B[Quick Start]\n    B --&gt; C[Basic Concepts]\n    C --&gt; D[Basic Tutorial]\n    D --&gt; E[User Guide]\n    E --&gt; F[Advanced Topics]</code></pre>"},{"location":"getting-started/#tips-for-success","title":"\ud83d\udca1 Tips for Success","text":"<p>Best Practices</p> <ul> <li>Start small: Begin with simple analyses before moving to complex workflows</li> <li>Use sample data: Practice with our provided datasets before using your own</li> <li>Read error messages: PRISM provides detailed error messages to help you debug</li> <li>Join the community: Ask questions in our GitHub Discussions</li> </ul>"},{"location":"getting-started/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":"<p>Having issues? Check these resources:</p> <ul> <li>Common Installation Issues</li> <li>FAQ</li> <li>GitHub Issues</li> </ul>"},{"location":"getting-started/#sample-datasets","title":"\ud83d\udcca Sample Datasets","text":"<p>PRISM comes with several sample datasets for learning:</p> Dataset Description Size Use Case <code>protein</code> Small protein in water 10 MB Basic analysis <code>membrane</code> Lipid bilayer system 50 MB Membrane analysis <code>polymer</code> Polymer chain 5 MB Polymer analysis <code>crystal</code> Crystal structure 2 MB Solid-state analysis <p>Load them using: <pre><code>from prism.examples import load_sample_data\ntraj = load_sample_data('protein')  # or 'membrane', 'polymer', 'crystal'\n</code></pre></p>"},{"location":"getting-started/#ready-to-begin","title":"\ud83c\udf89 Ready to Begin?","text":"<p>Install PRISM  Quick Start Guide </p> <p>Need Help?</p> <p>If you encounter any issues or have questions:</p> <ul> <li>\ud83d\udce7 Email: zhaoqi.shi@wisc.edu</li> <li>\ud83d\udcac GitHub Discussions: Community Forum</li> <li>\ud83d\udc1b Bug Reports: GitHub Issues</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide provides detailed instructions for installing PRISM and its dependencies on various platforms.</p>"},{"location":"getting-started/installation/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>PRISM requires several components to be installed before you can use it. Please ensure you have the following prerequisites installed in order.</p>"},{"location":"getting-started/installation/#1-gromacs-required","title":"1. GROMACS (Required)","text":"<p>GROMACS is essential for PRISM's molecular dynamics simulations. Follow these steps to install GROMACS with GPU support:</p>"},{"location":"getting-started/installation/#check-cuda-toolkit","title":"Check CUDA Toolkit","text":"<p>First, verify that you have CUDA installed:</p> <pre><code>nvcc --version\n</code></pre> <p>If CUDA is not installed, please install it from NVIDIA's CUDA Toolkit page before proceeding.</p>"},{"location":"getting-started/installation/#install-build-dependencies","title":"Install Build Dependencies","text":"Ubuntu/DebianCentOS/RHELmacOS <pre><code># Install essential build tools\nsudo apt-get update\nsudo apt-get install gcc g++ cmake\nsudo apt-get install build-essential\n</code></pre> <pre><code># Install essential build tools\nsudo yum groupinstall \"Development Tools\"\nsudo yum install cmake gcc-c++\n</code></pre> <pre><code># Install using Homebrew\nbrew install cmake gcc\n</code></pre>"},{"location":"getting-started/installation/#download-and-build-gromacs","title":"Download and Build GROMACS","text":"<pre><code># Download GROMACS 2024.3\nwget https://ftp.gromacs.org/gromacs/gromacs-2024.3.tar.gz\ntar xfz gromacs-2024.3.tar.gz\n\n# Create build directory\ncd gromacs-2024.3\nmkdir build\ncd build\n\n# Configure with CMake (adjust paths as needed)\ncmake .. -DGMX_MPI=ON \\\n         -DGMX_BUILD_OWN_FFTW=ON \\\n         -DGMX_GPU=CUDA \\\n         -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda \\\n         -DCUDA_INCLUDE_DIRS=/usr/local/cuda/include \\\n         -DCUDA_CUDART_LIBRARY=/usr/local/cuda/lib64 \\\n         -DCMAKE_INSTALL_PREFIX=/opt/gromacs-2024.3\n\n# Build GROMACS (use all available cores)\nmake -j$(nproc)\n\n# Run tests (optional but recommended)\nmake check\n\n# Install GROMACS\nsudo make install\n\n# Source GROMACS environment\nsource /opt/gromacs-2024.3/bin/GMXRC\n</code></pre> <p>Add to your shell configuration</p> <p>Add the following line to your <code>~/.bashrc</code> or <code>~/.zshrc</code> to automatically source GROMACS: <pre><code>source /opt/gromacs-2024.3/bin/GMXRC\n</code></pre></p>"},{"location":"getting-started/installation/#install-bioconda-optional","title":"Install Bioconda (Optional)","text":"<p>For additional bioinformatics tools:</p> <pre><code># Install bioconda channel\nconda config --add channels bioconda\nconda config --add channels conda-forge\n</code></pre>"},{"location":"getting-started/installation/#2-python-environment-required","title":"2. Python Environment (Required)","text":"<p>PRISM requires Python 3.10 or higher. We recommend using Conda for environment management:</p> <pre><code># Create a new environment for PRISM\nconda create -n prism python=3.10\nconda activate prism\n</code></pre> <p>Python Version</p> <p>While Python 3.10 is recommended, PRISM supports Python 3.8 through 3.11. Python 3.10 offers the best balance of compatibility and performance.</p>"},{"location":"getting-started/installation/#3-core-python-dependencies-required","title":"3. Core Python Dependencies (Required)","text":"<p>Install essential Python packages:</p> <pre><code># Activate PRISM environment\nconda activate prism\n\n# Install PDBFixer and core scientific packages\nconda install -c conda-forge pdbfixer numpy scipy\n\n# Install YAML support\npip install pyyaml\n</code></pre>"},{"location":"getting-started/installation/#force-field-specific-dependencies","title":"\ud83e\uddea Force Field Specific Dependencies","text":"<p>Depending on which force fields you plan to use, install the appropriate packages:</p>"},{"location":"getting-started/installation/#for-gaff-support","title":"For GAFF Support","text":"<p>The General AMBER Force Field (GAFF) is commonly used for small molecules:</p> <pre><code># AmberTools (required for GAFF)\nconda install -c conda-forge ambertools\n\n# ACPYPE for AMBER topology conversion (required)\npip install acpype\n\n# RDKit for molecular structure handling (optional but recommended)\nconda install -c conda-forge rdkit\n</code></pre>"},{"location":"getting-started/installation/#for-openff-support","title":"For OpenFF Support","text":"<p>The Open Force Field Initiative provides modern, reproducible force fields:</p> <pre><code># OpenFF toolkit and dependencies\nconda install -c conda-forge openff-toolkit openff-interchange\n\n# RDKit for SDF file handling (required)\nconda install -c conda-forge rdkit\n\n# OpenBabel for file format conversion (optional but recommended)\nconda install -c conda-forge openbabel\n</code></pre>"},{"location":"getting-started/installation/#for-charmm-support","title":"For CHARMM Support","text":"<pre><code># CHARMM-GUI integration tools (optional)\npip install charmm-gui-api\n</code></pre>"},{"location":"getting-started/installation/#installing-prism","title":"\ud83d\udce6 Installing PRISM","text":"<p>Once all prerequisites are installed, you can install PRISM itself:</p>"},{"location":"getting-started/installation/#method-1-development-installation-recommended","title":"Method 1: Development Installation (Recommended)","text":"<p>This method allows you to modify PRISM and see changes immediately:</p> <pre><code># Clone the PRISM repository\ngit clone https://github.com/your-username/PRISM.git\ncd PRISM\n\n# Install in development mode\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#method-2-direct-usage","title":"Method 2: Direct Usage","text":"<p>You can use PRISM directly without installation:</p> <pre><code># Run PRISM directly\npython /path/to/PRISM/prism/builder.py\n</code></pre>"},{"location":"getting-started/installation/#method-3-standard-installation","title":"Method 3: Standard Installation","text":"<p>For a standard installation:</p> <pre><code># Clone the repository\ngit clone https://github.com/your-username/PRISM.git\ncd PRISM\n\n# Standard installation\npip install .\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"\u2705 Verification","text":"<p>After installation, verify that everything is working correctly:</p>"},{"location":"getting-started/installation/#test-gromacs-installation","title":"Test GROMACS Installation","text":"<pre><code># Check GROMACS version\ngmx --version\n\n# Should show version 2024.3 with CUDA support\n</code></pre>"},{"location":"getting-started/installation/#test-python-environment","title":"Test Python Environment","text":"<pre><code># Activate PRISM environment\nconda activate prism\n\n# Test imports\npython -c \"import prism; print(f'PRISM version: {prism.__version__}')\"\npython -c \"import pdbfixer; print('PDBFixer: OK')\"\npython -c \"import yaml; print('YAML: OK')\"\npython -c \"import numpy; print(f'NumPy: {numpy.__version__}')\"\n</code></pre>"},{"location":"getting-started/installation/#test-force-field-support","title":"Test Force Field Support","text":"<pre><code># Test GAFF support (if installed)\npython -c \"import acpype; print('ACPYPE: OK')\"\npython -c \"import parmed; print('AmberTools: OK')\"\n\n# Test OpenFF support (if installed)\npython -c \"import openff.toolkit; print('OpenFF: OK')\"\npython -c \"import openff.interchange; print('Interchange: OK')\"\n</code></pre>"},{"location":"getting-started/installation/#run-prism-test-suite","title":"Run PRISM Test Suite","text":"<pre><code># Navigate to PRISM directory\ncd PRISM\n\n# Run tests\npytest tests/\n\n# Or run a quick test\npython -m prism.tests.quick_test\n</code></pre>"},{"location":"getting-started/installation/#environment-variables","title":"\ud83d\udd27 Environment Variables","text":"<p>Set these environment variables for optimal performance:</p> <pre><code># Add to ~/.bashrc or ~/.zshrc\n\n# GROMACS path\nexport GMXRC=/opt/gromacs-2024.3/bin/GMXRC\nsource $GMXRC\n\n# CUDA paths (adjust as needed)\nexport CUDA_HOME=/usr/local/cuda\nexport PATH=$CUDA_HOME/bin:$PATH\nexport LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH\n\n# PRISM path (optional, for direct usage)\nexport PRISM_HOME=/path/to/PRISM\nexport PATH=$PRISM_HOME/bin:$PATH\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"getting-started/installation/#common-installation-issues","title":"Common Installation Issues","text":"GROMACS build fails with CUDA errors <p>Solution: Ensure CUDA paths are correct: <pre><code># Find CUDA installation\nwhich nvcc\nls /usr/local/cuda*\n\n# Update CMake command with correct paths\ncmake .. -DCUDA_TOOLKIT_ROOT_DIR=/correct/cuda/path ...\n</code></pre></p> ImportError: No module named 'prism' <p>Solution: Ensure you're in the correct conda environment: <pre><code>conda activate prism\nwhich python  # Should point to conda environment\npip list | grep prism\n</code></pre></p> PDBFixer installation fails <p>Solution: Install from conda-forge channel: <pre><code>conda install -c conda-forge pdbfixer\n# If still fails, try:\nconda install -c conda-forge openmm pdbfixer\n</code></pre></p> ACPYPE not found <p>Solution: Install with pip in the correct environment: <pre><code>conda activate prism\npip install acpype --upgrade\n</code></pre></p>"},{"location":"getting-started/installation/#platform-specific-issues","title":"Platform-Specific Issues","text":""},{"location":"getting-started/installation/#gpu-support-on-linux","title":"GPU Support on Linux","text":"<p>If GPU is not detected:</p> <pre><code># Check NVIDIA driver\nnvidia-smi\n\n# Check CUDA installation\nnvcc --version\nldconfig -p | grep cuda\n\n# Reinstall CUDA toolkit if necessary\n</code></pre>"},{"location":"getting-started/installation/#macos-specific","title":"macOS Specific","text":"<p>For macOS users without CUDA:</p> <pre><code># Build GROMACS without GPU support\ncmake .. -DGMX_MPI=ON \\\n         -DGMX_BUILD_OWN_FFTW=ON \\\n         -DGMX_GPU=OFF \\\n         -DCMAKE_INSTALL_PREFIX=/opt/gromacs-2024.3\n</code></pre>"},{"location":"getting-started/installation/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>GROMACS Installation Guide</li> <li>AmberTools Documentation</li> <li>OpenFF Documentation</li> <li>PRISM GitHub Repository</li> </ul>"},{"location":"getting-started/installation/#getting-help","title":"\ud83e\udd1d Getting Help","text":"<p>If you encounter issues during installation:</p> <ol> <li>Check the FAQ</li> <li>Search GitHub Issues</li> <li>Post on GitHub Discussions</li> <li>Contact: author email</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"\u2728 Next Steps","text":"<p>After successful installation:</p> Quick Start Tutorial Basic Concepts"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with PRISM in under 5 minutes. We'll walk through the basic workflow of preparing a protein-ligand system for molecular dynamics simulation.</p>"},{"location":"getting-started/quickstart/#prerequisites-check","title":"Prerequisites Check","text":"<p>Before starting, ensure you have: - \u2705 PRISM installed and configured - \u2705 GROMACS properly set up - \u2705 Required force field dependencies (GAFF or OpenFF) - \u2705 Your protein structure file (PDB format) - \u2705 Your ligand structure file (MOL2 or SDF format)</p>"},{"location":"getting-started/quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/quickstart/#1-prepare-your-input-files","title":"1. Prepare Your Input Files","text":"<p>Ensure you have: - Protein file: <code>protein.pdb</code> - Your protein structure - Ligand file: <code>ligand.mol2</code> (for GAFF) or <code>ligand.sdf</code> (for OpenFF)</p> <p>File Format Tips</p> <ul> <li>PDB files should have complete hydrogen atoms</li> <li>MOL2 files work best with GAFF force field</li> <li>SDF files are recommended for OpenFF force field</li> <li>Ensure ligand has proper 3D coordinates and hydrogens</li> </ul>"},{"location":"getting-started/quickstart/#2-run-prism","title":"2. Run PRISM","text":""},{"location":"getting-started/quickstart/#option-a-using-gaff-force-field-default","title":"Option A: Using GAFF Force Field (Default)","text":"<p>The simplest way to run PRISM with GAFF force field:</p> <pre><code>prism protein.pdb ligand.mol2 -o my_simulation\n</code></pre> <p>This command will: - Process your protein with the AMBER force field - Parameterize your ligand with GAFF - Build a solvated system - Generate all necessary simulation files</p>"},{"location":"getting-started/quickstart/#option-b-using-openff-force-field","title":"Option B: Using OpenFF Force Field","text":"<p>For more accurate ligand parameters using OpenFF:</p> <pre><code>prism protein.pdb ligand.sdf -o my_simulation --ligand-forcefield openff\n</code></pre>"},{"location":"getting-started/quickstart/#option-c-custom-configuration","title":"Option C: Custom Configuration","text":"<p>For advanced users with specific requirements:</p> <pre><code>prism protein.pdb ligand.mol2 -o my_simulation --config my_config.yaml\n</code></pre>"},{"location":"getting-started/quickstart/#3-understanding-the-output","title":"3. Understanding the Output","text":"<p>After PRISM completes, you'll find the following structure in your output directory:</p> <pre><code>my_simulation/\n\u251c\u2500\u2500 LIG.amb2gmx/           # Ligand force field files (if using GAFF)\n\u2502   \u251c\u2500\u2500 LIG.gro           # Ligand coordinates\n\u2502   \u251c\u2500\u2500 LIG.itp           # Ligand topology\n\u2502   \u2514\u2500\u2500 posre_LIG.itp     # Position restraints\n\u251c\u2500\u2500 LIG.openff2gmx/        # Ligand force field files (if using OpenFF)\n\u251c\u2500\u2500 GMX_PROLIG_MD/         # Main simulation directory\n\u2502   \u251c\u2500\u2500 solv_ions.gro     # Solvated system with ions\n\u2502   \u2514\u2500\u2500 topol.top         # System topology\n\u2514\u2500\u2500 mdps/                  # Simulation protocols\n    \u251c\u2500\u2500 em.mdp            # Energy minimization\n    \u251c\u2500\u2500 nvt.mdp           # NVT equilibration\n    \u251c\u2500\u2500 npt.mdp           # NPT equilibration\n    \u2514\u2500\u2500 md.mdp            # Production MD\n</code></pre>"},{"location":"getting-started/quickstart/#running-md-simulations","title":"Running MD Simulations","text":""},{"location":"getting-started/quickstart/#1-navigate-to-simulation-directory","title":"1. Navigate to Simulation Directory","text":"<pre><code>cd my_simulation/GMX_PROLIG_MD\n</code></pre>"},{"location":"getting-started/quickstart/#2-create-run-script","title":"2. Create Run Script","text":"<p>Create a file named <code>run_simulation.sh</code> with the following content:</p> <pre><code>#!/bin/bash\n\n# PRISM Molecular Dynamics Simulation Script\n# This script runs a complete MD simulation protocol\n\necho \"=========================================\"\necho \"Starting PRISM MD Simulation Protocol\"\necho \"=========================================\"\n\n# Set simulation parameters\nNTMPI=1        # Number of thread-MPI ranks\nNTOMP=10       # Number of OpenMP threads per rank\nGPU_ID=0       # GPU device ID\n\n# Step 1: Energy Minimization\necho -e \"\\n[1/4] Running Energy Minimization...\"\nmkdir -p em\nif [ -f ./em/em.gro ]; then\n    echo \"\u2713 EM already completed, skipping...\"\nelse\n    gmx grompp -f ../mdps/em.mdp -c solv_ions.gro -r solv_ions.gro \\\n               -p topol.top -o ./em/em.tpr -maxwarn 999\n    gmx mdrun -s ./em/em.tpr -deffnm ./em/em \\\n              -ntmpi $NTMPI -ntomp $NTOMP -gpu_id $GPU_ID -v\n    echo \"\u2713 Energy minimization completed!\"\nfi\n\n# Step 2: NVT Equilibration (Temperature)\necho -e \"\\n[2/4] Running NVT Equilibration...\"\nmkdir -p nvt\nif [ -f ./nvt/nvt.gro ]; then\n    echo \"\u2713 NVT already completed, skipping...\"\nelse\n    gmx grompp -f ../mdps/nvt.mdp -c ./em/em.gro -r ./em/em.gro \\\n               -p topol.top -o ./nvt/nvt.tpr -maxwarn 999\n    gmx mdrun -ntmpi $NTMPI -ntomp $NTOMP -nb gpu -bonded gpu \\\n              -pme gpu -gpu_id $GPU_ID -s ./nvt/nvt.tpr \\\n              -deffnm ./nvt/nvt -v\n    echo \"\u2713 NVT equilibration completed!\"\nfi\n\n# Step 3: NPT Equilibration (Pressure)\necho -e \"\\n[3/4] Running NPT Equilibration...\"\nmkdir -p npt\nif [ -f ./npt/npt.gro ]; then\n    echo \"\u2713 NPT already completed, skipping...\"\nelse\n    gmx grompp -f ../mdps/npt.mdp -c ./nvt/nvt.gro -r ./nvt/nvt.gro \\\n               -t ./nvt/nvt.cpt -p topol.top -o ./npt/npt.tpr -maxwarn 999\n    gmx mdrun -ntmpi $NTMPI -ntomp $NTOMP -nb gpu -bonded gpu \\\n              -pme gpu -gpu_id $GPU_ID -s ./npt/npt.tpr \\\n              -deffnm ./npt/npt -v\n    echo \"\u2713 NPT equilibration completed!\"\nfi\n\n# Step 4: Production MD\necho -e \"\\n[4/4] Running Production MD...\"\nmkdir -p prod\nif [ -f ./prod/md.gro ]; then\n    echo \"\u2713 Production MD already completed!\"\nelse\n    gmx grompp -f ../mdps/md.mdp -c ./npt/npt.gro -r ./npt/npt.gro \\\n               -p topol.top -o ./prod/md.tpr -maxwarn 999\n    gmx mdrun -ntmpi $NTMPI -ntomp $NTOMP -nb gpu -bonded gpu \\\n              -pme gpu -gpu_id $GPU_ID -s ./prod/md.tpr \\\n              -deffnm ./prod/md -v\n    echo \"\u2713 Production MD completed!\"\nfi\n\necho -e \"\\n=========================================\"\necho \"Simulation Protocol Completed Successfully!\"\necho \"=========================================\"\necho \"Results are in the 'prod' directory\"\n</code></pre>"},{"location":"getting-started/quickstart/#3-run-the-simulation","title":"3. Run the Simulation","text":"<p>Make the script executable and run:</p> <pre><code>chmod +x run_simulation.sh\nbash ./run_simulation.sh\n</code></pre> <p>GPU Acceleration</p> <p>The script is configured for GPU acceleration. If you don't have a GPU, remove the GPU-related flags: - Remove: <code>-nb gpu -bonded gpu -pme gpu -gpu_id 0</code> - The simulation will run on CPU only (slower but still functional)</p>"},{"location":"getting-started/quickstart/#4-monitor-progress","title":"4. Monitor Progress","text":"<p>The simulation will run through four stages: 1. Energy Minimization (~5 minutes) 2. NVT Equilibration (~10 minutes) 3. NPT Equilibration (~10 minutes) 4. Production MD (varies based on settings)</p>"},{"location":"getting-started/quickstart/#quick-examples","title":"Quick Examples","text":""},{"location":"getting-started/quickstart/#example-1-basic-protein-ligand-system","title":"Example 1: Basic Protein-Ligand System","text":"<pre><code># Prepare system with default settings\nprism 1ABC.pdb drug.mol2 -o drug_simulation\n\n# Run simulations\ncd drug_simulation/GMX_PROLIG_MD\nbash ../run_simulation.sh\n</code></pre>"},{"location":"getting-started/quickstart/#example-2-using-custom-water-model","title":"Example 2: Using Custom Water Model","text":"<pre><code># Create custom config file\ncat &gt; custom.yaml &lt;&lt; EOF\nwater_model: tip4p\nbox_size: 1.0\nEOF\n\n# Run with custom config\nprism protein.pdb ligand.mol2 -o output --config custom.yaml\n</code></pre>"},{"location":"getting-started/quickstart/#example-3-high-precision-openff-setup","title":"Example 3: High-Precision OpenFF Setup","text":"<pre><code># Use OpenFF for better ligand parameters\nprism receptor.pdb compound.sdf -o precise_sim --ligand-forcefield openff\n\n# Run with extended equilibration\ncd precise_sim/GMX_PROLIG_MD\n# Edit mdps/nvt.mdp and mdps/npt.mdp to increase nsteps if needed\nbash ../run_simulation.sh\n</code></pre>"},{"location":"getting-started/quickstart/#analyzing-results","title":"Analyzing Results","text":"<p>After the simulation completes, you can analyze the trajectory:</p> <pre><code># Check system stability (RMSD)\ngmx rms -s ./em/em.tpr -f ./prod/md.xtc -o rmsd.xvg\n\n# Analyze protein-ligand interactions\ngmx distance -s ./prod/md.tpr -f ./prod/md.xtc -select 'com of group \"Protein\" plus com of group \"LIG\"' -o distance.xvg\n\n# Extract snapshots\ngmx trjconv -s ./prod/md.tpr -f ./prod/md.xtc -o trajectory.pdb -dt 100\n</code></pre>"},{"location":"getting-started/quickstart/#common-options","title":"Common Options","text":"Option Description Example <code>-o</code> Output directory <code>-o my_project</code> <code>--ligand-forcefield</code> Force field for ligand <code>--ligand-forcefield openff</code> <code>--config</code> Custom configuration file <code>--config custom.yaml</code> <code>--water</code> Water model <code>--water tip4p</code> <code>--box-size</code> Box padding (nm) <code>--box-size 1.2</code> <code>--ions</code> Ion concentration (M) <code>--ions 0.15</code>"},{"location":"getting-started/quickstart/#troubleshooting-quick-tips","title":"Troubleshooting Quick Tips","text":"<p>Common Issues</p> <p>Issue: \"Atom type not found\" error - Solution: Ensure force field files are properly generated. Check the <code>LIG.amb2gmx/</code> or <code>LIG.openff2gmx/</code> directory.</p> <p>Issue: Simulation crashes during minimization - Solution: Check for clashes in input structures. Consider using a larger box size.</p> <p>Issue: \"GPU not detected\" message - Solution: Verify CUDA installation and GROMACS GPU support with <code>gmx mdrun -version</code></p> <p>Issue: Simulation is very slow - Solution: Use GPU acceleration or increase the number of CPU cores with <code>-ntomp</code></p>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've completed your first simulation:</p> <ol> <li>Explore Advanced Features: Check the User Guide for detailed configuration options</li> <li>Optimize Performance: Learn about performance tuning</li> <li>Analyze Results: See our analysis tutorials</li> <li>Customize Protocols: Modify MDP files for your specific research needs</li> </ol> <p>Congratulations!</p> <p>You've successfully set up and run your first protein-ligand MD simulation with PRISM! \ud83c\udf89</p> <p>For more complex scenarios and advanced features, explore the rest of our documentation.</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>Welcome to the PRISM User Guide. This guide provides comprehensive documentation for using PRISM to build and analyze protein-ligand systems.</p>"},{"location":"user-guide/#guide-organization","title":"Guide Organization","text":"<p>This guide is organized into the following sections:</p>"},{"location":"user-guide/#system-building","title":"System Building","text":"<ul> <li>Building Overview - Introduction to system preparation</li> <li>Input Preparation - Preparing protein and ligand files</li> <li>Force Fields - Using GAFF and OpenFF force fields</li> <li>Configuration - Customizing PRISM settings</li> </ul>"},{"location":"user-guide/#running-simulations","title":"Running Simulations","text":"<ul> <li>Simulation Overview - Introduction to MD simulations</li> <li>GROMACS Simulations - Running with GROMACS</li> <li>OpenMM Simulations - Running with OpenMM</li> </ul>"},{"location":"user-guide/#analysis","title":"Analysis","text":"<ul> <li>Analysis Overview - Introduction to trajectory analysis</li> <li>Trajectory Analysis - Analyzing MD trajectories</li> <li>Contact Analysis - Protein-ligand contact analysis</li> <li>Visualization - Interactive HTML visualizations</li> </ul>"},{"location":"user-guide/#reference","title":"Reference","text":"<ul> <li>Output Structure - Understanding output files</li> <li>Command Line - CLI reference</li> <li>Python API - Using PRISM as a library</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"user-guide/analysis-tools/","title":"Analysis Tools","text":"<p>PRISM provides comprehensive analysis and visualization tools for molecular dynamics trajectories, with special focus on protein-ligand interactions.</p>"},{"location":"user-guide/analysis-tools/#quick-start","title":"Quick Start","text":""},{"location":"user-guide/analysis-tools/#basic-analysis","title":"Basic Analysis","text":"<pre><code>from prism.analysis.visualization import generate_html\n\n# Generate interactive visualization\ngenerate_html(\n    trajectory=\"output/GMX_PROLIG_MD/prod/md.xtc\",\n    topology=\"output/GMX_PROLIG_MD/prod/md.tpr\", \n    ligand=\"ligand.sdf\",\n    output=\"contact_analysis.html\"\n)\n\n# Open contact_analysis.html in browser for interactive visualization\n</code></pre>"},{"location":"user-guide/analysis-tools/#using-the-analysis-module","title":"Using the Analysis Module","text":"<pre><code>from prism.analysis.visualization import HTMLGenerator\n\n# Initialize analyzer\nanalyzer = HTMLGenerator(\n    trajectory_file=\"trajectory.xtc\",\n    topology_file=\"topology.gro\",\n    ligand_file=\"ligand.sdf\"\n)\n\n# Run analysis\nresults = analyzer.analyze()\n\n# Generate visualization\nanalyzer.generate(\"my_analysis.html\")\n</code></pre>"},{"location":"user-guide/analysis-tools/#contact-analysis","title":"Contact Analysis","text":""},{"location":"user-guide/analysis-tools/#protein-ligand-contacts","title":"Protein-Ligand Contacts","text":"<p>PRISM automatically identifies and analyzes protein-ligand contacts:</p> <pre><code>from prism.analysis.visualization import FastContactAnalyzer\nimport mdtraj as md\n\n# Load trajectory\ntraj = md.load(\"trajectory.xtc\", top=\"topology.gro\")\n\n# Analyze contacts\nanalyzer = FastContactAnalyzer(traj)\ncontact_results = analyzer.calculate_contact_proportions()\n\n# Results include:\nprint(f\"Contact frequencies: {contact_results['contact_frequencies']}\")\nprint(f\"Residue proportions: {contact_results['residue_proportions']}\")\nprint(f\"Average distances: {contact_results['residue_avg_distances']}\")\n</code></pre>"},{"location":"user-guide/analysis-tools/#understanding-contact-metrics","title":"Understanding Contact Metrics","text":"<p>Contact Frequency: Fraction of frames where contact exists - &gt; 0.8: Very strong interaction - 0.5-0.8: Strong interaction - 0.2-0.5: Moderate interaction - &lt; 0.2: Weak/transient interaction</p> <p>Distance Cutoffs: - Enter: 3.5 \u00c5 (0.35 nm) - Exit: 4.0 \u00c5 (0.40 nm) - Maximum: 5.0 \u00c5 (0.50 nm)</p>"},{"location":"user-guide/analysis-tools/#interactive-html-visualization","title":"Interactive HTML Visualization","text":""},{"location":"user-guide/analysis-tools/#features","title":"Features","text":"<p>The HTML visualization provides: - 2D/3D molecular view with real-time rotation - Contact frequency heatmap with color coding - Interactive residue network  - TOP 3 contacts highlighted - Export capabilities for publication</p>"},{"location":"user-guide/analysis-tools/#customization","title":"Customization","text":"<pre><code>from prism.analysis.visualization import HTMLGenerator\n\n# Custom configuration\ngenerator = HTMLGenerator(\n    trajectory_file=\"traj.xtc\",\n    topology_file=\"topol.gro\",\n    ligand_file=\"ligand.sdf\"\n)\n\n# Modify configuration\ngenerator.config.contact_enter_threshold_nm = 0.30  # Stricter cutoff\ngenerator.config.distance_cutoff_nm = 0.45  # Shorter max distance\n\n# Generate with custom settings\ngenerator.generate(\"custom_analysis.html\")\n</code></pre>"},{"location":"user-guide/analysis-tools/#visualization-controls","title":"Visualization Controls","text":"<p>In the generated HTML: - Drag residues: Rearrange in 2D mode - Toggle 3D: Switch between 2D/3D views - Show/Hide: Connections, hydrogen atoms - Export: High-resolution PNG (up to 8K) - Zoom: Mouse wheel or buttons - Pan: Middle-click or Shift+drag</p>"},{"location":"user-guide/analysis-tools/#trajectory-analysis-with-mdtraj","title":"Trajectory Analysis with MDTraj","text":""},{"location":"user-guide/analysis-tools/#basic-trajectory-analysis","title":"Basic Trajectory Analysis","text":"<pre><code>import mdtraj as md\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Load trajectory\ntraj = md.load(\"output/GMX_PROLIG_MD/prod/md.xtc\", \n               top=\"output/GMX_PROLIG_MD/solv_ions.gro\")\n\nprint(f\"Trajectory: {traj.n_frames} frames, {traj.n_atoms} atoms\")\nprint(f\"Time: {traj.time[0]} to {traj.time[-1]} ps\")\n</code></pre>"},{"location":"user-guide/analysis-tools/#rmsd-analysis","title":"RMSD Analysis","text":"<pre><code># Protein RMSD\nprotein_atoms = traj.topology.select(\"protein and name CA\")\nprotein_traj = traj.atom_slice(protein_atoms)\n\n# Align and calculate RMSD\nprotein_traj.superpose(protein_traj[0])\nrmsd = md.rmsd(protein_traj, protein_traj[0])\n\n# Plot\nplt.figure(figsize=(10, 6))\nplt.plot(traj.time, rmsd * 10)  # Convert to Angstroms\nplt.xlabel(\"Time (ps)\")\nplt.ylabel(\"RMSD (\u00c5)\")\nplt.title(\"Protein C\u03b1 RMSD\")\nplt.show()\n\n# Ligand RMSD\nligand_atoms = traj.topology.select(\"resname LIG\")\nligand_rmsd = md.rmsd(traj, traj[0], atom_indices=ligand_atoms)\n</code></pre>"},{"location":"user-guide/analysis-tools/#rmsf-analysis","title":"RMSF Analysis","text":"<pre><code># Calculate RMSF per residue\nrmsf = md.rmsf(protein_traj, protein_traj[0])\n\n# Get residue numbers\nresidues = [protein_traj.topology.atom(i).residue.resSeq \n            for i in range(protein_traj.n_atoms)]\n\n# Plot\nplt.figure(figsize=(12, 6))\nplt.plot(residues, rmsf * 10)\nplt.xlabel(\"Residue Number\")\nplt.ylabel(\"RMSF (\u00c5)\")\nplt.title(\"Residue Flexibility\")\nplt.show()\n</code></pre>"},{"location":"user-guide/analysis-tools/#radius-of-gyration","title":"Radius of Gyration","text":"<pre><code># Calculate Rg over time\nrg = md.compute_rg(traj.atom_slice(traj.topology.select(\"protein\")))\n\nplt.figure(figsize=(10, 6))\nplt.plot(traj.time, rg)\nplt.xlabel(\"Time (ps)\")\nplt.ylabel(\"Radius of Gyration (nm)\")\nplt.title(\"Protein Compactness\")\nplt.show()\n\n# Check for unfolding\nif rg[-1] &gt; rg[0] * 1.2:\n    print(\"Warning: Protein may be unfolding\")\n</code></pre>"},{"location":"user-guide/analysis-tools/#hydrogen-bond-analysis","title":"Hydrogen Bond Analysis","text":"<pre><code># Find hydrogen bonds\nhbonds = md.baker_hubbard(traj, freq=0.5)  # Present in &gt;50% of frames\n\nprint(f\"Found {len(hbonds)} hydrogen bonds\")\n\n# Analyze protein-ligand H-bonds\nligand_atoms = set(traj.topology.select(\"resname LIG\"))\nprotein_ligand_hbonds = []\n\nfor donor, hydrogen, acceptor in hbonds:\n    if (donor in ligand_atoms) != (acceptor in ligand_atoms):\n        # One is ligand, other is protein\n        protein_ligand_hbonds.append((donor, hydrogen, acceptor))\n\nprint(f\"Protein-ligand H-bonds: {len(protein_ligand_hbonds)}\")\n\n# Get details\nfor donor, hydrogen, acceptor in protein_ligand_hbonds[:5]:\n    d_atom = traj.topology.atom(donor)\n    a_atom = traj.topology.atom(acceptor)\n    print(f\"{d_atom.residue}-{d_atom.name} -&gt; {a_atom.residue}-{a_atom.name}\")\n</code></pre>"},{"location":"user-guide/analysis-tools/#binding-site-analysis","title":"Binding Site Analysis","text":""},{"location":"user-guide/analysis-tools/#contact-residues","title":"Contact Residues","text":"<pre><code># Identify binding site residues\ncutoff = 0.5  # nm\nligand_atoms = traj.topology.select(\"resname LIG\")\n\n# Find contacts\ncontacts = md.compute_neighbors(traj, cutoff, ligand_atoms)\n\n# Get unique residues\nbinding_residues = set()\nfor frame_contacts in contacts:\n    for atom_idx in frame_contacts:\n        residue = traj.topology.atom(atom_idx).residue\n        if residue.name not in ['LIG', 'HOH', 'WAT']:\n            binding_residues.add(residue)\n\nprint(f\"Binding site residues: {len(binding_residues)}\")\nfor res in sorted(binding_residues, key=lambda x: x.resSeq):\n    print(f\"  {res.name}{res.resSeq}\")\n</code></pre>"},{"location":"user-guide/analysis-tools/#pocket-volume","title":"Pocket Volume","text":"<pre><code>from scipy.spatial import ConvexHull\n\ndef calculate_pocket_volume(traj, pocket_residues):\n    \"\"\"Calculate binding pocket volume over time\"\"\"\n\n    volumes = []\n    for frame in traj:\n        # Get pocket atom coordinates\n        pocket_atoms = []\n        for res in pocket_residues:\n            for atom in res.atoms:\n                pocket_atoms.append(atom.index)\n\n        coords = frame.xyz[0, pocket_atoms]\n\n        # Calculate convex hull volume\n        try:\n            hull = ConvexHull(coords)\n            volumes.append(hull.volume)\n        except:\n            volumes.append(np.nan)\n\n    return np.array(volumes)\n\n# Calculate and plot\npocket_volume = calculate_pocket_volume(traj, binding_residues)\n\nplt.figure(figsize=(10, 6))\nplt.plot(traj.time, pocket_volume)\nplt.xlabel(\"Time (ps)\")\nplt.ylabel(\"Pocket Volume (nm\u00b3)\")\nplt.title(\"Binding Pocket Volume\")\nplt.show()\n</code></pre>"},{"location":"user-guide/analysis-tools/#ligand-dynamics","title":"Ligand Dynamics","text":""},{"location":"user-guide/analysis-tools/#ligand-movement","title":"Ligand Movement","text":"<pre><code># Track ligand center of mass\nligand_atoms = traj.topology.select(\"resname LIG\")\nligand_com = md.compute_center_of_mass(\n    traj.atom_slice(ligand_atoms)\n)\n\n# Calculate displacement\ndisplacement = np.linalg.norm(ligand_com - ligand_com[0], axis=1)\n\nplt.figure(figsize=(10, 6))\nplt.plot(traj.time, displacement * 10)\nplt.xlabel(\"Time (ps)\")\nplt.ylabel(\"Displacement (\u00c5)\")\nplt.title(\"Ligand Movement from Initial Position\")\nplt.show()\n</code></pre>"},{"location":"user-guide/analysis-tools/#ligand-orientation","title":"Ligand Orientation","text":"<pre><code># Define ligand vectors (customize for your ligand)\ndef get_ligand_orientation(traj):\n    \"\"\"Calculate ligand orientation angles\"\"\"\n\n    # Example: vector between two specific atoms\n    atom1 = traj.topology.select(\"resname LIG and name C1\")[0]\n    atom2 = traj.topology.select(\"resname LIG and name C10\")[0]\n\n    vectors = traj.xyz[:, atom2] - traj.xyz[:, atom1]\n\n    # Calculate angles relative to initial\n    initial = vectors[0]\n    angles = []\n\n    for vec in vectors:\n        cos_angle = np.dot(vec, initial) / (\n            np.linalg.norm(vec) * np.linalg.norm(initial)\n        )\n        angle = np.arccos(np.clip(cos_angle, -1, 1))\n        angles.append(np.degrees(angle))\n\n    return np.array(angles)\n\nangles = get_ligand_orientation(traj)\nplt.plot(traj.time, angles)\nplt.xlabel(\"Time (ps)\")\nplt.ylabel(\"Rotation Angle (degrees)\")\nplt.show()\n</code></pre>"},{"location":"user-guide/analysis-tools/#free-energy-calculations","title":"Free Energy Calculations","text":""},{"location":"user-guide/analysis-tools/#mm-pbsa-simplified","title":"MM-PBSA (Simplified)","text":"<pre><code># Basic MM-PBSA calculation (requires additional tools)\ndef calculate_binding_energy(traj, topology):\n    \"\"\"Simplified binding energy calculation\"\"\"\n\n    # This is a simplified example\n    # Real MM-PBSA requires specialized software\n\n    # Select components\n    protein = traj.topology.select(\"protein\")\n    ligand = traj.topology.select(\"resname LIG\")\n    complex_atoms = traj.topology.select(\"protein or resname LIG\")\n\n    energies = []\n\n    for frame in traj[::10]:  # Every 10th frame\n        # Would calculate:\n        # E_binding = E_complex - E_protein - E_ligand\n        # Including solvation effects\n        pass\n\n    return energies\n\n# Note: Use gmx_MMPBSA or similar tools for accurate calculations\n</code></pre>"},{"location":"user-guide/analysis-tools/#water-analysis","title":"Water Analysis","text":""},{"location":"user-guide/analysis-tools/#water-density","title":"Water Density","text":"<pre><code># Analyze water distribution around ligand\ndef water_density_around_ligand(traj, cutoff=0.5):\n    \"\"\"Calculate water density around ligand\"\"\"\n\n    ligand = traj.topology.select(\"resname LIG\")\n    water_oxygens = traj.topology.select(\"water and name O\")\n\n    water_counts = []\n\n    for frame in traj:\n        # Count waters within cutoff\n        distances = md.compute_distances(\n            frame,\n            [[lig, wat] for lig in ligand for wat in water_oxygens]\n        )\n\n        within_cutoff = np.sum(distances &lt; cutoff)\n        water_counts.append(within_cutoff)\n\n    return np.array(water_counts)\n\nwater_count = water_density_around_ligand(traj)\n\nplt.figure(figsize=(10, 6))\nplt.plot(traj.time, water_count)\nplt.xlabel(\"Time (ps)\")\nplt.ylabel(\"Number of Water Molecules\")\nplt.title(f\"Waters within 5 \u00c5 of Ligand\")\nplt.show()\n</code></pre>"},{"location":"user-guide/analysis-tools/#clustering-analysis","title":"Clustering Analysis","text":""},{"location":"user-guide/analysis-tools/#conformational-clustering","title":"Conformational Clustering","text":"<pre><code>from sklearn.cluster import KMeans\n\n# Cluster ligand conformations\nligand_atoms = traj.topology.select(\"resname LIG\")\nligand_traj = traj.atom_slice(ligand_atoms)\n\n# Align ligand trajectory\nligand_traj.superpose(ligand_traj[0])\n\n# Reshape for clustering\nX = ligand_traj.xyz.reshape((ligand_traj.n_frames, -1))\n\n# Perform clustering\nn_clusters = 5\nkmeans = KMeans(n_clusters=n_clusters, random_state=42)\nclusters = kmeans.fit_predict(X)\n\n# Analyze clusters\nfor i in range(n_clusters):\n    cluster_frames = np.where(clusters == i)[0]\n    print(f\"Cluster {i}: {len(cluster_frames)} frames \"\n          f\"({100*len(cluster_frames)/len(clusters):.1f}%)\")\n\n    # Save representative structure\n    representative = cluster_frames[len(cluster_frames)//2]\n    ligand_traj[representative].save(f\"cluster_{i}.pdb\")\n</code></pre>"},{"location":"user-guide/analysis-tools/#custom-analysis-functions","title":"Custom Analysis Functions","text":""},{"location":"user-guide/analysis-tools/#create-analysis-pipeline","title":"Create Analysis Pipeline","text":"<pre><code>class TrajectoryAnalyzer:\n    \"\"\"Custom analysis pipeline\"\"\"\n\n    def __init__(self, trajectory, topology):\n        self.traj = md.load(trajectory, top=topology)\n        self.results = {}\n\n    def analyze_all(self):\n        \"\"\"Run all analyses\"\"\"\n        self.calculate_rmsd()\n        self.calculate_rmsf()\n        self.analyze_contacts()\n        self.analyze_hbonds()\n        return self.results\n\n    def calculate_rmsd(self):\n        \"\"\"Calculate RMSD\"\"\"\n        protein = self.traj.topology.select(\"protein and name CA\")\n        rmsd = md.rmsd(self.traj, self.traj[0], atom_indices=protein)\n        self.results['rmsd'] = {\n            'values': rmsd,\n            'mean': np.mean(rmsd),\n            'std': np.std(rmsd)\n        }\n\n    def calculate_rmsf(self):\n        \"\"\"Calculate RMSF\"\"\"\n        protein = self.traj.topology.select(\"protein and name CA\")\n        traj_ca = self.traj.atom_slice(protein)\n        rmsf = md.rmsf(traj_ca, traj_ca[0])\n        self.results['rmsf'] = rmsf\n\n    def analyze_contacts(self):\n        \"\"\"Analyze contacts\"\"\"\n        # Your contact analysis\n        pass\n\n    def analyze_hbonds(self):\n        \"\"\"Analyze hydrogen bonds\"\"\"\n        hbonds = md.baker_hubbard(self.traj, freq=0.5)\n        self.results['hbonds'] = hbonds\n\n    def save_report(self, filename=\"analysis_report.txt\"):\n        \"\"\"Save analysis report\"\"\"\n        with open(filename, 'w') as f:\n            f.write(\"=== Trajectory Analysis Report ===\\n\\n\")\n\n            if 'rmsd' in self.results:\n                f.write(f\"RMSD: {self.results['rmsd']['mean']:.3f} \u00b1 \"\n                       f\"{self.results['rmsd']['std']:.3f} nm\\n\")\n\n            if 'hbonds' in self.results:\n                f.write(f\"Hydrogen bonds: {len(self.results['hbonds'])}\\n\")\n\n# Use the analyzer\nanalyzer = TrajectoryAnalyzer(\n    \"trajectory.xtc\",\n    \"topology.gro\"\n)\nresults = analyzer.analyze_all()\nanalyzer.save_report()\n</code></pre>"},{"location":"user-guide/analysis-tools/#visualization-with-nglview","title":"Visualization with NGLView","text":""},{"location":"user-guide/analysis-tools/#interactive-3d-visualization","title":"Interactive 3D Visualization","text":"<pre><code>import nglview as nv\nimport mdtraj as md\n\n# Load trajectory\ntraj = md.load(\"trajectory.xtc\", top=\"topology.gro\")\n\n# Create viewer\nview = nv.show_mdtraj(traj)\n\n# Customize representation\nview.clear_representations()\nview.add_cartoon(selection=\"protein\", color=\"secondary structure\")\nview.add_licorice(selection=\"LIG\", color=\"element\")\nview.add_ball_and_stick(selection=\"protein and (sidechain and not hydrogen)\")\n\n# Add surfaces\nview.add_surface(selection=\"protein\", opacity=0.3)\n\n# Display\nview\n</code></pre>"},{"location":"user-guide/analysis-tools/#performance-tips","title":"Performance Tips","text":""},{"location":"user-guide/analysis-tools/#efficient-loading","title":"Efficient Loading","text":"<pre><code># Load only specific atoms\nprotein_ligand = traj.topology.select(\"protein or resname LIG\")\ntraj_subset = md.load(\"trajectory.xtc\", \n                      top=\"topology.gro\",\n                      atom_indices=protein_ligand)\n\n# Load specific time range\ntraj_partial = md.load(\"trajectory.xtc\",\n                      top=\"topology.gro\", \n                      stride=10,  # Every 10th frame\n                      frame=1000)  # Start from frame 1000\n</code></pre>"},{"location":"user-guide/analysis-tools/#parallel-analysis","title":"Parallel Analysis","text":"<pre><code>from multiprocessing import Pool\nimport functools\n\ndef analyze_chunk(chunk_idx, traj_file, topology):\n    \"\"\"Analyze trajectory chunk\"\"\"\n    # Load chunk\n    traj = md.load(traj_file, top=topology,\n                  frame=chunk_idx*1000, \n                  n_frames=1000)\n\n    # Analyze\n    rmsd = md.rmsd(traj, traj[0])\n\n    return {'chunk': chunk_idx, 'rmsd': rmsd}\n\n# Parallel analysis\nwith Pool(4) as pool:\n    analyze_func = functools.partial(\n        analyze_chunk,\n        traj_file=\"trajectory.xtc\",\n        topology=\"topology.gro\"\n    )\n    results = pool.map(analyze_func, range(4))\n</code></pre>"},{"location":"user-guide/analysis-tools/#export-results","title":"Export Results","text":""},{"location":"user-guide/analysis-tools/#publication-figures","title":"Publication Figures","text":"<pre><code>import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set publication style\nplt.style.use('seaborn-v0_8-paper')\nsns.set_palette(\"husl\")\n\nfig, axes = plt.subplots(2, 2, figsize=(12, 10))\n\n# RMSD\naxes[0,0].plot(traj.time/1000, rmsd*10, linewidth=2)\naxes[0,0].set_xlabel(\"Time (ns)\")\naxes[0,0].set_ylabel(\"RMSD (\u00c5)\")\naxes[0,0].set_title(\"A. Protein Stability\")\n\n# RMSF\naxes[0,1].plot(residues, rmsf*10, linewidth=2)\naxes[0,1].set_xlabel(\"Residue\")\naxes[0,1].set_ylabel(\"RMSF (\u00c5)\")\naxes[0,1].set_title(\"B. Residue Flexibility\")\n\n# Contacts\naxes[1,0].hist(contact_frequencies, bins=20, edgecolor='black')\naxes[1,0].set_xlabel(\"Contact Frequency\")\naxes[1,0].set_ylabel(\"Count\")\naxes[1,0].set_title(\"C. Contact Distribution\")\n\n# H-bonds\naxes[1,1].plot(traj.time/1000, hbond_count, linewidth=2)\naxes[1,1].set_xlabel(\"Time (ns)\")\naxes[1,1].set_ylabel(\"H-bonds\")\naxes[1,1].set_title(\"D. Hydrogen Bonds\")\n\nplt.tight_layout()\nplt.savefig(\"analysis_figure.pdf\", dpi=300, bbox_inches='tight')\nplt.savefig(\"analysis_figure.png\", dpi=300, bbox_inches='tight')\n</code></pre>"},{"location":"user-guide/analysis-tools/#data-export","title":"Data Export","text":"<pre><code>import pandas as pd\n\n# Create results dataframe\nresults_df = pd.DataFrame({\n    'Time_ns': traj.time / 1000,\n    'RMSD_A': rmsd * 10,\n    'Rg_nm': rg,\n    'Hbonds': hbond_count,\n    'Ligand_displacement_A': displacement * 10\n})\n\n# Save to CSV\nresults_df.to_csv(\"analysis_results.csv\", index=False)\n\n# Save to Excel with multiple sheets\nwith pd.ExcelWriter(\"analysis_results.xlsx\") as writer:\n    results_df.to_excel(writer, sheet_name=\"Time Series\", index=False)\n\n    # Add contact data\n    contacts_df = pd.DataFrame(contact_results['residue_proportions'].items(),\n                              columns=['Residue', 'Contact_Frequency'])\n    contacts_df.to_excel(writer, sheet_name=\"Contacts\", index=False)\n</code></pre>"},{"location":"user-guide/analysis-tools/#next-steps","title":"Next Steps","text":"<ul> <li>Review Output Files structure</li> <li>Learn Advanced Usage techniques</li> <li>Troubleshoot issues with Troubleshooting Guide</li> </ul>"},{"location":"user-guide/building-systems/","title":"Building Systems","text":"<p>This guide covers the complete process of building protein-ligand systems for molecular dynamics simulations using PRISM.</p>"},{"location":"user-guide/building-systems/#quick-start","title":"Quick Start","text":""},{"location":"user-guide/building-systems/#basic-system-building","title":"Basic System Building","text":"<p>The simplest way to build a system:</p> <pre><code># Build with defaults (GAFF, amber99sb, tip3p)\nprism protein.pdb ligand.mol2 -o my_system\n\n# Build with OpenFF for ligand\nprism protein.pdb ligand.sdf -o my_system --ligand-forcefield openff\n\n# Build with custom force field\nprism protein.pdb ligand.mol2 -o my_system --forcefield amber14sb --water tip4p\n</code></pre>"},{"location":"user-guide/building-systems/#using-python-api","title":"Using Python API","text":"<pre><code>import prism\n\n# Create system\nsystem = prism.PRISMSystem(\n    \"protein.pdb\",\n    \"ligand.mol2\",\n    output_dir=\"my_system\"\n)\n\n# Build\nsystem.build()\n\n# Get output files\nfiles = system.get_output_files()\nprint(f\"System files: {files['gromacs_directory']}\")\n</code></pre>"},{"location":"user-guide/building-systems/#the-building-process","title":"The Building Process","text":"<p>PRISM performs these steps automatically:</p> <ol> <li>Force field generation for ligand</li> <li>Protein cleaning and preparation</li> <li>Complex assembly</li> <li>Solvation in water box</li> <li>Ion addition for neutralization</li> <li>Topology generation</li> <li>MDP file creation</li> </ol>"},{"location":"user-guide/building-systems/#step-by-step-building","title":"Step-by-Step Building","text":""},{"location":"user-guide/building-systems/#step-1-force-field-generation","title":"Step 1: Force Field Generation","text":"<p>PRISM generates ligand parameters automatically:</p> <pre><code>from prism import PRISMBuilder\n\n# Initialize builder\nbuilder = PRISMBuilder(\n    \"protein.pdb\",\n    \"ligand.mol2\",\n    \"output\",\n    ligand_forcefield=\"gaff\"  # or \"openff\"\n)\n\n# Generate ligand force field only\nlig_ff_dir = builder.generate_ligand_forcefield()\nprint(f\"Ligand parameters in: {lig_ff_dir}\")\n</code></pre> <p>What happens: - Charges calculated (AM1-BCC for GAFF) - Atom types assigned - Bonded parameters generated - GROMACS-compatible files created</p>"},{"location":"user-guide/building-systems/#step-2-protein-preparation","title":"Step 2: Protein Preparation","text":"<pre><code># Clean protein\ncleaned_protein = builder.clean_protein()\n</code></pre> <p>Automatic cleaning: - Removes HETATM records - Fixes terminal residue names - Handles HIE/HID/HIP histidine naming</p>"},{"location":"user-guide/building-systems/#step-3-system-assembly","title":"Step 3: System Assembly","text":"<pre><code># Build the complete model\nmodel_dir = builder.build_model(cleaned_protein)\n</code></pre> <p>Assembly process: 1. Process protein with pdb2gmx 2. Combine protein and ligand 3. Define simulation box 4. Add solvent 5. Add ions</p>"},{"location":"user-guide/building-systems/#force-field-selection","title":"Force Field Selection","text":""},{"location":"user-guide/building-systems/#protein-force-fields","title":"Protein Force Fields","text":"<p>Available options depend on your GROMACS installation:</p> <pre><code># List available force fields\nprism --list-forcefields\n</code></pre> <p>Common choices:</p> Force Field Use Case Water Models amber99sb General purpose tip3p, tip4p, spce amber14sb Improved backbone tip3p, tip4p amber99sb-ildn Better side chains tip3p, tip4p charmm36 Widely validated tips3p opls-aa Good for small molecules tip3p, tip4p, spce"},{"location":"user-guide/building-systems/#ligand-force-fields","title":"Ligand Force Fields","text":"<p>PRISM supports two approaches:</p>"},{"location":"user-guide/building-systems/#gaff-general-amber-force-field","title":"GAFF (General AMBER Force Field)","text":"<pre><code>prism protein.pdb ligand.mol2 -o output --ligand-forcefield gaff\n</code></pre> <p>Advantages: - Well-tested - Good for drug-like molecules - Compatible with AMBER protein force fields</p> <p>Requirements: - AmberTools installed - MOL2 format input</p>"},{"location":"user-guide/building-systems/#openff-open-force-field","title":"OpenFF (Open Force Field)","text":"<pre><code>prism protein.pdb ligand.sdf -o output --ligand-forcefield openff\n</code></pre> <p>Advantages: - Modern, systematically improved - Better coverage of chemical space - Actively developed</p> <p>Requirements: - openff-toolkit installed - SDF or MOL2 format</p>"},{"location":"user-guide/building-systems/#force-field-compatibility","title":"Force Field Compatibility","text":"Protein FF Compatible Ligand FF Recommended Water amber99sb GAFF, OpenFF tip3p amber14sb GAFF, OpenFF tip3p charmm36 CGenFF* tips3p opls-aa OPLS-AA* tip4p <p>*Not directly supported by PRISM, requires manual setup</p>"},{"location":"user-guide/building-systems/#box-types-and-solvation","title":"Box Types and Solvation","text":""},{"location":"user-guide/building-systems/#box-shapes","title":"Box Shapes","text":"<p>Configure box shape in your config file or command line:</p> <pre><code># Cubic box (default)\nprism protein.pdb ligand.mol2 -o output --box-shape cubic\n\n# Dodecahedron (more efficient)\nprism protein.pdb ligand.mol2 -o output --box-shape dodecahedron\n\n# Set distance to box edge\nprism protein.pdb ligand.mol2 -o output --box-distance 1.5\n</code></pre>"},{"location":"user-guide/building-systems/#box-size-considerations","title":"Box Size Considerations","text":"<pre><code># Calculate box size needed\nimport mdtraj as md\n\n# Load protein\ntraj = md.load(\"protein.pdb\")\n\n# Get dimensions\nprint(f\"Protein size: {traj.xyz.max(axis=1) - traj.xyz.min(axis=1)} nm\")\n\n# Recommended box distance\nmin_distance = 1.0  # nm (minimum)\nsafe_distance = 1.5  # nm (recommended)\nlarge_distance = 2.0  # nm (for unfolding studies)\n</code></pre>"},{"location":"user-guide/building-systems/#solvation-options","title":"Solvation Options","text":"<pre><code># In configuration file\nbox:\n  distance: 1.5\n  shape: dodecahedron\n  center: true\n\nions:\n  neutral: true\n  concentration: 0.15  # Physiological salt\n</code></pre>"},{"location":"user-guide/building-systems/#building-complex-systems","title":"Building Complex Systems","text":""},{"location":"user-guide/building-systems/#multiple-ligands","title":"Multiple Ligands","text":"<p>For systems with multiple ligands:</p> <pre><code># Build first ligand system\nsystem1 = prism.PRISMSystem(\"protein.pdb\", \"ligand1.mol2\", \"temp1\")\nsystem1.build()\n\n# Build second ligand system\nsystem2 = prism.PRISMSystem(\"protein.pdb\", \"ligand2.mol2\", \"temp2\")\nsystem2.build()\n\n# Combine manually (advanced)\n# See Advanced Usage guide\n</code></pre>"},{"location":"user-guide/building-systems/#membrane-proteins","title":"Membrane Proteins","text":"<p>Special considerations for membrane proteins:</p> <pre><code># 1. Orient protein in membrane first (use OPM, CHARMM-GUI)\n# 2. Build membrane system (outside PRISM)\n# 3. Add ligand to membrane system\n\n# Example workflow:\n# Use CHARMM-GUI for initial membrane setup\n# Extract protein-ligand complex\n# Use PRISM for ligand parameterization only\nbuilder = PRISMBuilder(\"protein.pdb\", \"ligand.mol2\", \"output\")\nlig_params = builder.generate_ligand_forcefield()\n# Then integrate with membrane system\n</code></pre>"},{"location":"user-guide/building-systems/#protein-protein-complexes","title":"Protein-Protein Complexes","text":"<pre><code># Prepare complex PDB with both proteins\n# Each chain should be properly labeled\n\nsystem = prism.PRISMSystem(\n    \"protein_complex.pdb\",\n    \"ligand.mol2\",\n    \"output\",\n    config={\n        'box': {'distance': 2.0},  # Larger box for complexes\n        'simulation': {'production_time_ns': 1000}\n    }\n)\nsystem.build()\n</code></pre>"},{"location":"user-guide/building-systems/#system-validation","title":"System Validation","text":""},{"location":"user-guide/building-systems/#check-generated-files","title":"Check Generated Files","text":"<p>After building, verify the output:</p> <pre><code># Check output structure\nsystem = prism.PRISMSystem(\"protein.pdb\", \"ligand.mol2\", \"output\")\nsystem.build()\n\n# List generated files\nfiles = system.get_output_files()\nfor name, path in files.items():\n    if os.path.exists(path):\n        print(f\"\u2713 {name}: {path}\")\n    else:\n        print(f\"\u2717 {name}: MISSING\")\n</code></pre>"},{"location":"user-guide/building-systems/#visualize-system","title":"Visualize System","text":"<pre><code>import mdtraj as md\nimport nglview as nv\n\n# Load the solvated system\ntraj = md.load(\"output/GMX_PROLIG_MD/solv_ions.gro\")\n\n# Quick statistics\nprint(f\"Total atoms: {traj.n_atoms}\")\nprint(f\"Box vectors: {traj.unitcell_vectors}\")\n\n# Count water molecules\nwater_atoms = traj.topology.select(\"water\")\nprint(f\"Water molecules: {len(water_atoms) // 3}\")\n\n# Count ions\nna_ions = traj.topology.select(\"resname NA\")\ncl_ions = traj.topology.select(\"resname CL\")\nprint(f\"Na+ ions: {len(na_ions)}, Cl- ions: {len(cl_ions)}\")\n\n# Visualize\nview = nv.show_mdtraj(traj)\nview\n</code></pre>"},{"location":"user-guide/building-systems/#validate-topology","title":"Validate Topology","text":"<pre><code># Check topology file\ncd output/GMX_PROLIG_MD\ngrep -c \"^SOL\" topol.top  # Count solvent molecules\ngrep \"qtot\" topol.top | tail -1  # Check total charge\n</code></pre>"},{"location":"user-guide/building-systems/#common-building-scenarios","title":"Common Building Scenarios","text":""},{"location":"user-guide/building-systems/#high-throughput-screening","title":"High-Throughput Screening","text":"<pre><code>import prism\nfrom pathlib import Path\n\n# List of ligands to process\nligands = Path(\"ligands\").glob(\"*.mol2\")\n\nfor ligand_file in ligands:\n    ligand_name = ligand_file.stem\n\n    system = prism.PRISMSystem(\n        \"protein.pdb\",\n        str(ligand_file),\n        f\"output/{ligand_name}\",\n        config=\"screening_config.yaml\"\n    )\n\n    try:\n        system.build()\n        print(f\"\u2713 Built system for {ligand_name}\")\n    except Exception as e:\n        print(f\"\u2717 Failed for {ligand_name}: {e}\")\n</code></pre>"},{"location":"user-guide/building-systems/#mutation-studies","title":"Mutation Studies","text":"<pre><code># For each mutant\nmutants = [\"WT\", \"A123V\", \"A123L\", \"A123F\"]\n\nfor mutant in mutants:\n    system = prism.PRISMSystem(\n        f\"protein_{mutant}.pdb\",\n        \"ligand.mol2\",\n        f\"output/{mutant}\",\n        config=\"mutation_study.yaml\"\n    )\n    system.build()\n</code></pre>"},{"location":"user-guide/building-systems/#ph-studies","title":"pH Studies","text":"<pre><code># Build systems at different pH values\nfor pH in [5.0, 6.0, 7.0, 8.0]:\n    # First prepare protein at specific pH\n    prepare_at_ph(\"protein.pdb\", f\"protein_pH{pH}.pdb\", pH)\n\n    # Then build system\n    system = prism.PRISMSystem(\n        f\"protein_pH{pH}.pdb\",\n        \"ligand.mol2\",\n        f\"output/pH_{pH}\"\n    )\n    system.build()\n</code></pre>"},{"location":"user-guide/building-systems/#build-options","title":"Build Options","text":""},{"location":"user-guide/building-systems/#command-line-options","title":"Command-Line Options","text":"<pre><code># Full command with all options\nprism protein.pdb ligand.mol2 \\\n  --output my_system \\\n  --ligand-forcefield gaff \\\n  --forcefield amber14sb \\\n  --water tip3p \\\n  --box-shape dodecahedron \\\n  --box-distance 1.5 \\\n  --salt-concentration 0.15 \\\n  --temperature 310 \\\n  --pressure 1.0 \\\n  --production-ns 500 \\\n  --overwrite\n</code></pre>"},{"location":"user-guide/building-systems/#python-api-options","title":"Python API Options","text":"<pre><code>system = prism.PRISMSystem(\n    \"protein.pdb\",\n    \"ligand.mol2\",\n    output_dir=\"my_system\",\n    ligand_forcefield=\"gaff\",\n    forcefield=\"amber14sb\",\n    water_model=\"tip3p\",\n    overwrite=True\n)\n\n# Additional configuration\nsystem.config['box']['distance'] = 2.0\nsystem.config['simulation']['production_time_ns'] = 1000\n\n# Build\nsystem.build()\n</code></pre>"},{"location":"user-guide/building-systems/#troubleshooting-build-issues","title":"Troubleshooting Build Issues","text":""},{"location":"user-guide/building-systems/#issue-force-field-not-found","title":"Issue: \"Force field not found\"","text":"<pre><code># Check available force fields\nprism --list-forcefields\n\n# Use a known available force field\nprism protein.pdb ligand.mol2 -o output --forcefield amber99sb\n</code></pre>"},{"location":"user-guide/building-systems/#issue-cannot-generate-ligand-parameters","title":"Issue: \"Cannot generate ligand parameters\"","text":"<pre><code># Check ligand structure\nfrom rdkit import Chem\n\nmol = Chem.MolFromMol2File(\"ligand.mol2\")\nif mol is None:\n    print(\"Invalid MOL2 file\")\nelse:\n    # Check for common issues\n    print(f\"Atoms: {mol.GetNumAtoms()}\")\n    print(f\"Bonds: {mol.GetNumBonds()}\")\n\n    # Visualize to check structure\n    from rdkit.Chem import Draw\n    Draw.MolToFile(mol, \"ligand.png\")\n</code></pre>"},{"location":"user-guide/building-systems/#issue-system-has-non-zero-charge","title":"Issue: \"System has non-zero charge\"","text":"<pre><code># Check topology\ngrep \"qtot\" output/GMX_PROLIG_MD/topol.top | tail -1\n\n# If non-zero, check ion addition\n# Increase salt concentration or check ligand charge\nprism protein.pdb ligand.mol2 -o output --ligand-charge -1\n</code></pre>"},{"location":"user-guide/building-systems/#issue-protein-ligand-overlap","title":"Issue: \"Protein-ligand overlap\"","text":"<p>This usually means the ligand wasn't properly positioned:</p> <ol> <li>Check input files are in same coordinate frame</li> <li>Ensure ligand is positioned where it should bind</li> <li>Use docking to position ligand first if needed</li> </ol>"},{"location":"user-guide/building-systems/#performance-tips","title":"Performance Tips","text":""},{"location":"user-guide/building-systems/#speed-up-building","title":"Speed Up Building","text":"<ol> <li> <p>Reuse force field parameters: <pre><code># Build once\nsystem = prism.PRISMSystem(\"protein.pdb\", \"ligand.mol2\", \"output\")\nsystem.build()\n\n# Reuse for similar systems\n# Copy output/LIG.amb2gmx for other proteins\n</code></pre></p> </li> <li> <p>Parallel processing: <pre><code>from multiprocessing import Pool\n\ndef build_system(args):\n    protein, ligand, output = args\n    system = prism.PRISMSystem(protein, ligand, output)\n    return system.build()\n\n# Build multiple systems in parallel\nwith Pool(4) as pool:\n    systems = [\n        (\"protein.pdb\", \"lig1.mol2\", \"out1\"),\n        (\"protein.pdb\", \"lig2.mol2\", \"out2\"),\n        # ...\n    ]\n    pool.map(build_system, systems)\n</code></pre></p> </li> <li> <p>Skip unnecessary steps: <pre><code># If protein is already clean\nprism protein_clean.pdb ligand.mol2 -o output\n\n# If force field files exist\nprism protein.pdb ligand.mol2 -o output  # Detects existing files\n</code></pre></p> </li> </ol>"},{"location":"user-guide/building-systems/#quality-assurance","title":"Quality Assurance","text":""},{"location":"user-guide/building-systems/#pre-build-checklist","title":"Pre-Build Checklist","text":"<ul> <li> Protein structure is complete</li> <li> Ligand has correct protonation</li> <li> Ligand is positioned appropriately</li> <li> Force field choice is appropriate</li> <li> Box size is sufficient</li> </ul>"},{"location":"user-guide/building-systems/#post-build-verification","title":"Post-Build Verification","text":"<ul> <li> System has zero net charge</li> <li> No atom overlaps</li> <li> Correct number of waters/ions</li> <li> Topology file is complete</li> <li> MDP files are generated</li> </ul>"},{"location":"user-guide/building-systems/#visual-inspection","title":"Visual Inspection","text":"<p>Always visualize the built system:</p> <pre><code># Using VMD\nvmd output/GMX_PROLIG_MD/solv_ions.gro\n\n# Using PyMOL\npymol output/GMX_PROLIG_MD/solv_ions.gro\n</code></pre>"},{"location":"user-guide/building-systems/#next-steps","title":"Next Steps","text":"<ul> <li>Choose appropriate Force Fields</li> <li>Learn to Run Simulations</li> <li>Understand Output Files</li> </ul>"},{"location":"user-guide/configuration/","title":"Configuration Guide","text":"<p>PRISM uses a flexible YAML-based configuration system that allows you to customize every aspect of your molecular dynamics simulations. This guide covers all configuration options and best practices.</p>"},{"location":"user-guide/configuration/#configuration-overview","title":"Configuration Overview","text":"<p>PRISM can be configured through: 1. Command-line arguments (highest priority) 2. Configuration files (YAML format) 3. Default settings (built-in defaults)</p>"},{"location":"user-guide/configuration/#using-configuration-files","title":"Using Configuration Files","text":""},{"location":"user-guide/configuration/#basic-usage","title":"Basic Usage","text":"<p>Create a custom configuration file and use it with PRISM:</p> <pre><code># Use a custom configuration\nprism protein.pdb ligand.mol2 -o output --config my_config.yaml\n\n# Export the default configuration as a template\nprism --export-config my_config.yaml\n</code></pre>"},{"location":"user-guide/configuration/#configuration-file-structure","title":"Configuration File Structure","text":"<pre><code># my_config.yaml\ngeneral:\n  overwrite: false  # Whether to overwrite existing files\n\nbox:\n  distance: 1.5     # Distance from protein to box edge (nm)\n  shape: cubic      # Box shape: cubic, dodecahedron, octahedron\n  center: true      # Center the protein in the box\n\nsimulation:\n  temperature: 310  # Temperature in Kelvin\n  pressure: 1.0     # Pressure in bar\n  pH: 7.0          # pH for protonation states\n  production_time_ns: 500  # Production run time\n</code></pre>"},{"location":"user-guide/configuration/#configuration-sections","title":"Configuration Sections","text":""},{"location":"user-guide/configuration/#general-settings","title":"General Settings","text":"<p>Controls overall behavior of PRISM:</p> <pre><code>general:\n  overwrite: false  # Overwrite existing files\n  # gmx_command is auto-detected but can be specified:\n  # gmx_command: /usr/local/bin/gmx\n</code></pre>"},{"location":"user-guide/configuration/#box-settings","title":"Box Settings","text":"<p>Define the simulation box parameters:</p> <pre><code>box:\n  distance: 1.5     # Minimum distance to box edge (nm)\n  shape: cubic      # Options: cubic, dodecahedron, octahedron\n  center: true      # Center protein in box\n</code></pre> <p>Box Shape Recommendations: - <code>cubic</code>: Simple, good for most systems - <code>dodecahedron</code>: ~29% less volume, more efficient - <code>octahedron</code>: ~20% less volume than cubic</p>"},{"location":"user-guide/configuration/#simulation-parameters","title":"Simulation Parameters","text":"<p>Core MD simulation settings:</p> <pre><code>simulation:\n  temperature: 310        # Body temperature (K)\n  pressure: 1.0          # Atmospheric pressure (bar)\n  pH: 7.0               # Physiological pH\n  ligand_charge: 0      # Net charge of ligand\n  production_time_ns: 500  # Production run duration\n  dt: 0.002             # Time step (ps)\n  equilibration_nvt_time_ps: 500  # NVT equilibration\n  equilibration_npt_time_ps: 500  # NPT equilibration\n</code></pre> <p>Temperature Guidelines: - 277 K: Near freezing (4\u00b0C) - 298 K: Room temperature (25\u00b0C) - 310 K: Body temperature (37\u00b0C) - 323 K: Elevated temperature (50\u00b0C)</p>"},{"location":"user-guide/configuration/#ion-settings","title":"Ion Settings","text":"<p>Control system neutralization and salt concentration:</p> <pre><code>ions:\n  neutral: true         # Neutralize system charge\n  concentration: 0.15   # Salt concentration (M)\n  positive_ion: NA      # Sodium ions\n  negative_ion: CL      # Chloride ions\n</code></pre> <p>Common Salt Concentrations: - 0.0 M: No added salt - 0.15 M: Physiological conditions - 0.5 M: High salt - 1.0 M: Very high salt</p>"},{"location":"user-guide/configuration/#energy-minimization","title":"Energy Minimization","text":"<p>Parameters for energy minimization:</p> <pre><code>energy_minimization:\n  integrator: steep     # Steepest descent algorithm\n  emtol: 200.0         # Convergence criterion (kJ/mol/nm)\n  emstep: 0.01         # Initial step size\n  nsteps: 10000        # Maximum steps\n</code></pre>"},{"location":"user-guide/configuration/#output-settings","title":"Output Settings","text":"<p>Control output frequency and format:</p> <pre><code>output:\n  trajectory_interval_ps: 500   # Save coordinates every X ps\n  energy_interval_ps: 10        # Save energies every X ps\n  log_interval_ps: 10           # Log output frequency\n  compressed_trajectory: true    # Use XTC compression\n</code></pre> <p>Storage Considerations: - 500 ps interval: ~1 GB per \u03bcs for 50K atoms - 100 ps interval: ~5 GB per \u03bcs for 50K atoms - 10 ps interval: ~50 GB per \u03bcs for 50K atoms</p>"},{"location":"user-guide/configuration/#advanced-settings","title":"Advanced Settings","text":""},{"location":"user-guide/configuration/#electrostatics","title":"Electrostatics","text":"<pre><code>electrostatics:\n  coulombtype: PME      # Particle Mesh Ewald\n  rcoulomb: 1.0        # Coulomb cutoff (nm)\n  pme_order: 4         # PME interpolation order\n  fourierspacing: 0.16  # Grid spacing for FFT\n</code></pre>"},{"location":"user-guide/configuration/#van-der-waals","title":"Van der Waals","text":"<pre><code>vdw:\n  rvdw: 1.0            # VdW cutoff (nm)\n  dispcorr: EnerPres   # Long-range dispersion corrections\n</code></pre>"},{"location":"user-guide/configuration/#temperature-coupling","title":"Temperature Coupling","text":"<pre><code>temperature_coupling:\n  tcoupl: V-rescale    # Velocity rescaling thermostat\n  tc_grps:             # Temperature coupling groups\n    - Protein\n    - Non-Protein\n  tau_t:               # Coupling time constants (ps)\n    - 0.1\n    - 0.1\n</code></pre>"},{"location":"user-guide/configuration/#pressure-coupling","title":"Pressure Coupling","text":"<pre><code>pressure_coupling:\n  pcoupl: C-rescale    # C-rescale barostat (GROMACS 2021+)\n  pcoupltype: isotropic  # Isotropic scaling\n  tau_p: 1.0           # Coupling time constant (ps)\n  compressibility: 4.5e-05  # Water compressibility\n</code></pre>"},{"location":"user-guide/configuration/#constraints","title":"Constraints","text":"<pre><code>constraints:\n  algorithm: lincs     # LINCS constraint algorithm\n  type: h-bonds        # Constrain hydrogen bonds\n  lincs_iter: 1        # LINCS iterations\n  lincs_order: 4       # LINCS order\n</code></pre>"},{"location":"user-guide/configuration/#command-line-overrides","title":"Command-Line Overrides","text":"<p>Command-line arguments override configuration file settings:</p> <pre><code># Override temperature\nprism protein.pdb ligand.mol2 -o output --temperature 300\n\n# Override multiple parameters\nprism protein.pdb ligand.mol2 -o output \\\n  --forcefield amber14sb \\\n  --water tip4p \\\n  --temperature 298 \\\n  --production-ns 1000 \\\n  --box-distance 2.0\n</code></pre>"},{"location":"user-guide/configuration/#configuration-priority","title":"Configuration Priority","text":"<p>Settings are applied in this order (highest to lowest priority): 1. Command-line arguments 2. Custom configuration file 3. Default configuration</p> <p>Example: <pre><code># my_config.yaml has temperature: 310\n# Command line overrides to 300\nprism protein.pdb ligand.mol2 --config my_config.yaml --temperature 300\n# Final temperature: 300 K\n</code></pre></p>"},{"location":"user-guide/configuration/#configuration-templates","title":"Configuration Templates","text":""},{"location":"user-guide/configuration/#membrane-protein-configuration","title":"Membrane Protein Configuration","text":"<pre><code># membrane_config.yaml\nbox:\n  shape: cubic  # Better for membranes\n  distance: 2.0  # Extra space for membrane\n\nsimulation:\n  temperature: 310\n  pressure: 1.0\n  production_time_ns: 1000  # Longer for membrane systems\n\npressure_coupling:\n  pcoupltype: semiisotropic  # For membranes\n  tau_p: 5.0  # Slower coupling for membranes\n</code></pre>"},{"location":"user-guide/configuration/#high-throughput-screening","title":"High-Throughput Screening","text":"<pre><code># screening_config.yaml\ngeneral:\n  overwrite: true  # Always overwrite\n\nsimulation:\n  production_time_ns: 100  # Shorter runs\n  equilibration_nvt_time_ps: 100\n  equilibration_npt_time_ps: 100\n\noutput:\n  trajectory_interval_ps: 1000  # Less frequent output\n  compressed_trajectory: true\n</code></pre>"},{"location":"user-guide/configuration/#enhanced-sampling","title":"Enhanced Sampling","text":"<pre><code># enhanced_sampling.yaml\nsimulation:\n  temperature: 323  # Higher temperature\n  dt: 0.002\n  production_time_ns: 2000  # Longer simulation\n\noutput:\n  trajectory_interval_ps: 100  # More frequent sampling\n</code></pre>"},{"location":"user-guide/configuration/#python-api-configuration","title":"Python API Configuration","text":"<p>Using configuration in Python scripts:</p> <pre><code>import prism\n\n# Load from file\nsystem = prism.PRISMSystem(\n    \"protein.pdb\",\n    \"ligand.mol2\",\n    config=\"my_config.yaml\"\n)\n\n# Or provide dictionary\nconfig = {\n    'simulation': {\n        'temperature': 300,\n        'production_time_ns': 1000\n    },\n    'box': {\n        'distance': 2.0\n    }\n}\n\nsystem = prism.PRISMSystem(\n    \"protein.pdb\",\n    \"ligand.mol2\",\n    config=config\n)\n\n# Build system\nsystem.build()\n</code></pre>"},{"location":"user-guide/configuration/#validation-and-debugging","title":"Validation and Debugging","text":""},{"location":"user-guide/configuration/#check-configuration","title":"Check Configuration","text":"<p>View the configuration used for a system:</p> <pre><code># The configuration is saved automatically\ncat output/prism_config.yaml\n</code></pre>"},{"location":"user-guide/configuration/#list-available-force-fields","title":"List Available Force Fields","text":"<pre><code>prism --list-forcefields\n</code></pre>"},{"location":"user-guide/configuration/#validate-configuration","title":"Validate Configuration","text":"<p>PRISM automatically validates configuration parameters: - Temperature: 0-1000 K - Pressure: 0.1-1000 bar - Time step: 0.0001-0.004 ps - Box distance: 0.5-10 nm</p>"},{"location":"user-guide/configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Start with defaults: The default configuration works well for most systems</li> <li>Save your configuration: Always save successful configurations for reproducibility</li> <li>Use appropriate time steps: </li> <li>2 fs (0.002 ps) with H-bond constraints</li> <li>1 fs (0.001 ps) without constraints</li> <li>4 fs (0.004 ps) with virtual sites</li> <li>Match temperature to experiment: Use the same temperature as your experimental conditions</li> <li>Equilibrate properly: Don't skip equilibration steps</li> <li>Monitor convergence: Check that properties converge during equilibration</li> </ol>"},{"location":"user-guide/configuration/#common-configuration-scenarios","title":"Common Configuration Scenarios","text":""},{"location":"user-guide/configuration/#drug-target-binding","title":"Drug-Target Binding","text":"<pre><code>simulation:\n  temperature: 310  # Body temperature\n  pH: 7.4          # Physiological pH\n  production_time_ns: 500-1000\nions:\n  concentration: 0.15  # Physiological\n</code></pre>"},{"location":"user-guide/configuration/#protein-folding","title":"Protein Folding","text":"<pre><code>simulation:\n  temperature: 298  # or range for REMD\n  production_time_ns: 1000-5000\nbox:\n  distance: 2.0  # Extra space for unfolding\n</code></pre>"},{"location":"user-guide/configuration/#enzyme-catalysis","title":"Enzyme Catalysis","text":"<pre><code>simulation:\n  temperature: 310\n  pH: 7.0  # Or enzyme optimal pH\n  dt: 0.001  # Smaller timestep for QM/MM\nconstraints:\n  type: none  # For QM/MM regions\n</code></pre>"},{"location":"user-guide/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"user-guide/configuration/#common-issues","title":"Common Issues","text":"<ol> <li>\"Invalid configuration key\": Check for typos in YAML keys</li> <li>\"Value out of range\": Check parameter limits</li> <li>\"File not found\": Use absolute paths or check working directory</li> <li>\"YAML parsing error\": Check indentation and syntax</li> </ol>"},{"location":"user-guide/configuration/#configuration-validation","title":"Configuration Validation","text":"<pre><code>from prism.utils.config import ConfigurationManager\n\n# Validate a configuration file\nconfig_mgr = ConfigurationManager(\"my_config.yaml\")\nconfig_mgr.validate()  # Raises errors if invalid\n</code></pre>"},{"location":"user-guide/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Input Files preparation</li> <li>Understand Force Fields selection</li> <li>Start Building Systems</li> </ul>"},{"location":"user-guide/force-fields/","title":"Force Fields Guide","text":"<p>Force fields are mathematical models that describe molecular interactions. Choosing the right force field is crucial for accurate simulations. PRISM supports multiple force field combinations for proteins and ligands.</p>"},{"location":"user-guide/force-fields/#overview","title":"Overview","text":"<p>PRISM uses: - Protein force fields: AMBER, CHARMM, OPLS families - Ligand force fields: GAFF or OpenFF - Water models: TIP3P, TIP4P, SPC/E</p>"},{"location":"user-guide/force-fields/#quick-selection-guide","title":"Quick Selection Guide","text":""},{"location":"user-guide/force-fields/#for-drug-discovery","title":"For Drug Discovery","text":"<pre><code># Recommended: AMBER with GAFF\nprism protein.pdb ligand.mol2 -o output \\\n  --forcefield amber14sb \\\n  --ligand-forcefield gaff \\\n  --water tip3p\n</code></pre>"},{"location":"user-guide/force-fields/#for-modern-accuracy","title":"For Modern Accuracy","text":"<pre><code># Using OpenFF for better ligand parameters\nprism protein.pdb ligand.sdf -o output \\\n  --forcefield amber14sb \\\n  --ligand-forcefield openff \\\n  --water tip3p\n</code></pre>"},{"location":"user-guide/force-fields/#for-compatibility-with-literature","title":"For Compatibility with Literature","text":"<pre><code># Match published studies\nprism protein.pdb ligand.mol2 -o output \\\n  --forcefield amber99sb-ildn \\\n  --ligand-forcefield gaff \\\n  --water tip3p\n</code></pre>"},{"location":"user-guide/force-fields/#protein-force-fields","title":"Protein Force Fields","text":""},{"location":"user-guide/force-fields/#amber-family","title":"AMBER Family","text":"<p>The AMBER force fields are widely used and well-validated:</p>"},{"location":"user-guide/force-fields/#amber99sb","title":"amber99sb","text":"<ul> <li>Use case: General protein simulations</li> <li>Strengths: Well-tested, broad compatibility</li> <li>Limitations: Older, some known issues with loops</li> </ul> <pre><code>prism protein.pdb ligand.mol2 -o output --forcefield amber99sb\n</code></pre>"},{"location":"user-guide/force-fields/#amber99sb-ildn","title":"amber99sb-ildn","text":"<ul> <li>Use case: Improved side chain dynamics</li> <li>Strengths: Better \u03c71 and \u03c72 distributions</li> <li>Limitations: Still uses amber99sb backbone</li> </ul> <pre><code>prism protein.pdb ligand.mol2 -o output --forcefield amber99sb-ildn\n</code></pre>"},{"location":"user-guide/force-fields/#amber14sb-recommended","title":"amber14sb (Recommended)","text":"<ul> <li>Use case: Modern general-purpose simulations</li> <li>Strengths: Improved backbone and side chains</li> <li>Best for: Most drug discovery applications</li> </ul> <pre><code>prism protein.pdb ligand.mol2 -o output --forcefield amber14sb\n</code></pre>"},{"location":"user-guide/force-fields/#amber03","title":"amber03","text":"<ul> <li>Use case: Specific compatibility needs</li> <li>Strengths: Good for some specific systems</li> <li>Note: Generally superseded by newer versions</li> </ul>"},{"location":"user-guide/force-fields/#charmm-family","title":"CHARMM Family","text":""},{"location":"user-guide/force-fields/#charmm36","title":"charmm36","text":"<ul> <li>Use case: Membrane proteins, lipids, carbohydrates</li> <li>Strengths: Excellent for complex systems</li> <li>Water model: Use tips3p (CHARMM-modified TIP3P)</li> </ul> <pre><code>prism protein.pdb ligand.mol2 -o output \\\n  --forcefield charmm36 \\\n  --water tips3p\n</code></pre>"},{"location":"user-guide/force-fields/#charmm27","title":"charmm27","text":"<ul> <li>Use case: Legacy compatibility</li> <li>Note: Superseded by charmm36</li> </ul>"},{"location":"user-guide/force-fields/#opls-family","title":"OPLS Family","text":""},{"location":"user-guide/force-fields/#opls-aa","title":"opls-aa","text":"<ul> <li>Use case: Small molecule interactions</li> <li>Strengths: Good for protein-ligand systems</li> <li>Water model: TIP4P recommended</li> </ul> <pre><code>prism protein.pdb ligand.mol2 -o output \\\n  --forcefield oplsaa \\\n  --water tip4p\n</code></pre>"},{"location":"user-guide/force-fields/#force-field-comparison","title":"Force Field Comparison","text":"Force Field Proteins Nucleic Acids Lipids Carbohydrates Small Molecules amber14sb Excellent Good Limited Limited With GAFF/OpenFF amber99sb-ildn Good Good Limited Limited With GAFF/OpenFF charmm36 Excellent Excellent Excellent Excellent With CGenFF* opls-aa Good Limited Limited Limited Good <p>*CGenFF not directly supported by PRISM</p>"},{"location":"user-guide/force-fields/#ligand-force-fields","title":"Ligand Force Fields","text":""},{"location":"user-guide/force-fields/#gaff-general-amber-force-field","title":"GAFF (General AMBER Force Field)","text":"<p>GAFF is the traditional choice for drug-like molecules:</p> <pre><code># Automatic charge calculation (AM1-BCC)\nprism protein.pdb ligand.mol2 -o output --ligand-forcefield gaff\n</code></pre> <p>Advantages: - Extensive validation - Compatible with AMBER protein force fields - Well-understood limitations</p> <p>Process: 1. Atom typing using AMBER types 2. AM1-BCC charge calculation 3. Missing parameter generation with parmchk2</p> <p>Best for: - Drug-like molecules - Systems where comparability with literature is important - Quick setup with reasonable accuracy</p>"},{"location":"user-guide/force-fields/#openff-open-force-field","title":"OpenFF (Open Force Field)","text":"<p>OpenFF represents modern force field development:</p> <pre><code># Latest OpenFF version\nprism protein.pdb ligand.sdf -o output --ligand-forcefield openff\n</code></pre> <p>Advantages: - Systematically improved parameters - Better coverage of chemical space - Active development and updates - Data-driven parameterization</p> <p>Process: 1. SMIRKS-based atom typing 2. AM1-BCC-ELF10 charges (improved version) 3. Parameters from curated quantum chemistry data</p> <p>Best for: - Novel chemical matter - Highest accuracy requirements - Systems with unusual functional groups</p>"},{"location":"user-guide/force-fields/#comparing-gaff-vs-openff","title":"Comparing GAFF vs OpenFF","text":"Aspect GAFF OpenFF Maturity Very mature (20+ years) Newer (5+ years) Coverage Good for drug-like Broader chemical space Validation Extensive Growing rapidly Updates Stable/infrequent Regular improvements Charges AM1-BCC AM1-BCC-ELF10 Parameters Rule-based Data-driven"},{"location":"user-guide/force-fields/#water-models","title":"Water Models","text":""},{"location":"user-guide/force-fields/#tip3p","title":"TIP3P","text":"<p>Most common water model:</p> <pre><code>prism protein.pdb ligand.mol2 -o output --water tip3p\n</code></pre> <ul> <li>Pros: Fast, well-tested, standard choice</li> <li>Cons: Some properties not perfectly reproduced</li> <li>Use with: AMBER force fields</li> </ul>"},{"location":"user-guide/force-fields/#tip4p","title":"TIP4P","text":"<p>Four-site water model:</p> <pre><code>prism protein.pdb ligand.mol2 -o output --water tip4p\n</code></pre> <ul> <li>Pros: Better bulk properties</li> <li>Cons: Slightly slower than TIP3P</li> <li>Use with: OPLS force fields</li> </ul>"},{"location":"user-guide/force-fields/#spce","title":"SPC/E","text":"<p>Extended simple point charge:</p> <pre><code>prism protein.pdb ligand.mol2 -o output --water spce\n</code></pre> <ul> <li>Pros: Good diffusion properties</li> <li>Cons: Less common in biomolecular simulations</li> <li>Use with: GROMOS force fields</li> </ul>"},{"location":"user-guide/force-fields/#water-model-selection","title":"Water Model Selection","text":"Property TIP3P TIP4P SPC/E Speed Fastest Slower Fast Density Good Better Good Diffusion Too fast Good Better Dielectric Good Better Good Standard use AMBER/CHARMM OPLS GROMOS"},{"location":"user-guide/force-fields/#force-field-combinations","title":"Force Field Combinations","text":""},{"location":"user-guide/force-fields/#recommended-combinations","title":"Recommended Combinations","text":"<pre><code># Standard drug discovery\ncombinations = {\n    \"standard\": {\n        \"protein\": \"amber14sb\",\n        \"ligand\": \"gaff\",\n        \"water\": \"tip3p\"\n    },\n    \"high_accuracy\": {\n        \"protein\": \"amber14sb\",\n        \"ligand\": \"openff\",\n        \"water\": \"tip3p\"\n    },\n    \"membrane\": {\n        \"protein\": \"charmm36\",\n        \"ligand\": \"cgenff\",  # Requires manual setup\n        \"water\": \"tips3p\"\n    },\n    \"compatibility\": {\n        \"protein\": \"amber99sb-ildn\",\n        \"ligand\": \"gaff\",\n        \"water\": \"tip3p\"\n    }\n}\n</code></pre>"},{"location":"user-guide/force-fields/#implementation-examples","title":"Implementation Examples","text":"<pre><code>import prism\n\n# Standard combination\nsystem = prism.PRISMSystem(\n    \"protein.pdb\",\n    \"ligand.mol2\",\n    output_dir=\"standard\",\n    ligand_forcefield=\"gaff\"\n)\nsystem.config['forcefield']['name'] = \"amber14sb\"\nsystem.config['water_model']['name'] = \"tip3p\"\nsystem.build()\n\n# High accuracy with OpenFF\nsystem = prism.PRISMSystem(\n    \"protein.pdb\",\n    \"ligand.sdf\",\n    output_dir=\"accurate\",\n    ligand_forcefield=\"openff\"\n)\nsystem.build()\n</code></pre>"},{"location":"user-guide/force-fields/#checking-available-force-fields","title":"Checking Available Force Fields","text":""},{"location":"user-guide/force-fields/#list-installed-force-fields","title":"List Installed Force Fields","text":"<pre><code># Check what's available in your GROMACS\nprism --list-forcefields\n</code></pre>"},{"location":"user-guide/force-fields/#verify-force-field-files","title":"Verify Force Field Files","text":"<pre><code>import os\nimport subprocess\n\n# Check GROMACS data directory\nresult = subprocess.run(\n    [\"gmx\", \"pdb2gmx\", \"-h\"],\n    capture_output=True,\n    text=True\n)\n\n# Parse available force fields\nfor line in result.stdout.split('\\n'):\n    if '.ff' in line:\n        print(line)\n</code></pre>"},{"location":"user-guide/force-fields/#advanced-force-field-topics","title":"Advanced Force Field Topics","text":""},{"location":"user-guide/force-fields/#modified-force-fields","title":"Modified Force Fields","text":""},{"location":"user-guide/force-fields/#custom-parameters","title":"Custom Parameters","text":"<pre><code># Generate standard parameters\nbuilder = prism.PRISMBuilder(\n    \"protein.pdb\",\n    \"ligand.mol2\",\n    \"output\"\n)\nlig_dir = builder.generate_ligand_forcefield()\n\n# Modify parameters in LIG.itp\nwith open(f\"{lig_dir}/LIG.itp\", 'r') as f:\n    topology = f.read()\n\n# Make modifications (e.g., adjust dihedrals)\n# ...\n\nwith open(f\"{lig_dir}/LIG_modified.itp\", 'w') as f:\n    f.write(modified_topology)\n</code></pre>"},{"location":"user-guide/force-fields/#force-field-mixing","title":"Force Field Mixing","text":"<p>Generally NOT recommended, but sometimes necessary:</p> <pre><code># Use AMBER for protein, OPLS parameters for specific residues\n# Requires careful validation!\n</code></pre>"},{"location":"user-guide/force-fields/#polarizable-force-fields","title":"Polarizable Force Fields","text":"<p>PRISM doesn't directly support polarizable force fields, but you can:</p> <ol> <li>Generate initial structures with PRISM</li> <li>Convert to polarizable force field manually</li> <li>Run with appropriate MD engine</li> </ol>"},{"location":"user-guide/force-fields/#united-atom-force-fields","title":"United Atom Force Fields","text":"<p>For faster simulations with reduced accuracy:</p> <pre><code># GROMOS united atom (not directly supported)\n# Generate with PRISM, then convert\n</code></pre>"},{"location":"user-guide/force-fields/#validation-and-testing","title":"Validation and Testing","text":""},{"location":"user-guide/force-fields/#comparing-force-fields","title":"Comparing Force Fields","text":"<pre><code>import prism\nimport mdtraj as md\nimport numpy as np\n\n# Build same system with different force fields\nforce_fields = [\"amber99sb\", \"amber14sb\", \"amber99sb-ildn\"]\n\nfor ff in force_fields:\n    system = prism.PRISMSystem(\n        \"protein.pdb\",\n        \"ligand.mol2\",\n        output_dir=f\"test_{ff}\",\n        forcefield=ff\n    )\n    system.build()\n\n    # Run short simulation\n    sim = prism.model(f\"test_{ff}/GMX_PROLIG_MD\")\n    sim.run(engine=\"gmx\", stages=[\"em\"])\n\n    # Compare energies\n    # ...\n</code></pre>"},{"location":"user-guide/force-fields/#validating-parameters","title":"Validating Parameters","text":"<pre><code># Check ligand parameters\ndef validate_ligand_parameters(itp_file):\n    \"\"\"Check for missing parameters or unusual values\"\"\"\n\n    with open(itp_file) as f:\n        content = f.read()\n\n    # Check for missing parameters (zeros)\n    if ' 0.00000 ' in content and 'charge' not in content:\n        print(\"Warning: Zero parameters found\")\n\n    # Check for very large force constants\n    import re\n    force_constants = re.findall(r'(\\d+\\.\\d+)\\s+;\\s*force', content)\n    for fc in force_constants:\n        if float(fc) &gt; 10000:\n            print(f\"Warning: Large force constant: {fc}\")\n</code></pre>"},{"location":"user-guide/force-fields/#force-field-selection-flowchart","title":"Force Field Selection Flowchart","text":"<pre><code>graph TD\n    A[Select Force Field] --&gt; B{System Type?}\n    B --&gt;|Protein-Ligand| C[AMBER + GAFF/OpenFF]\n    B --&gt;|Membrane| D[CHARMM36]\n    B --&gt;|Protein only| E[AMBER14sb]\n\n    C --&gt; F{Accuracy Need?}\n    F --&gt;|Standard| G[GAFF]\n    F --&gt;|High| H[OpenFF]\n\n    D --&gt; I[Use CHARMM-GUI]\n\n    E --&gt; J{Simulation Type?}\n    J --&gt;|Folding| K[AMBER99sb-ildn]\n    J --&gt;|Binding| L[AMBER14sb]</code></pre>"},{"location":"user-guide/force-fields/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/force-fields/#1-consistency","title":"1. Consistency","text":"<ul> <li>Use compatible force fields (e.g., AMBER + GAFF)</li> <li>Don't mix force field families without validation</li> <li>Document your choices</li> </ul>"},{"location":"user-guide/force-fields/#2-validation","title":"2. Validation","text":"<ul> <li>Compare with experimental data when available</li> <li>Run control simulations</li> <li>Check parameter coverage</li> </ul>"},{"location":"user-guide/force-fields/#3-updates","title":"3. Updates","text":"<ul> <li>Use recent force field versions</li> <li>Check for corrections/updates</li> <li>Consider new developments</li> </ul>"},{"location":"user-guide/force-fields/#4-documentation","title":"4. Documentation","text":"<pre><code># Always document force field choices\nmetadata = {\n    \"protein_ff\": \"amber14sb\",\n    \"ligand_ff\": \"gaff-2.11\",\n    \"water_model\": \"tip3p\",\n    \"salt\": \"Joung-Cheatham ions\",\n    \"rationale\": \"Standard protocol for drug-like molecules\"\n}\n\nimport json\nwith open(\"force_field_metadata.json\", \"w\") as f:\n    json.dump(metadata, f, indent=2)\n</code></pre>"},{"location":"user-guide/force-fields/#common-issues","title":"Common Issues","text":""},{"location":"user-guide/force-fields/#issue-force-field-xx-not-found","title":"Issue: \"Force field XX not found\"","text":"<pre><code># Check installation\nprism --list-forcefields\n\n# Use available alternative\nprism protein.pdb ligand.mol2 -o output --forcefield amber99sb\n</code></pre>"},{"location":"user-guide/force-fields/#issue-parameters-not-found-for-atom-type","title":"Issue: \"Parameters not found for atom type\"","text":"<pre><code># This happens with unusual chemistry\n# Solutions:\n\n# 1. Try OpenFF (better coverage)\nprism protein.pdb ligand.sdf -o output --ligand-forcefield openff\n\n# 2. Check ligand structure\nfrom rdkit import Chem\nmol = Chem.MolFromMol2File(\"ligand.mol2\")\n# Visualize and check for errors\n\n# 3. Simplify molecule for testing\n# Remove problematic groups and test\n</code></pre>"},{"location":"user-guide/force-fields/#issue-incompatible-water-model","title":"Issue: \"Incompatible water model\"","text":"<pre><code># Check force field - water model compatibility\n# AMBER force fields: use tip3p or tip4p\n# CHARMM: use tips3p\n# OPLS: use tip4p\n</code></pre>"},{"location":"user-guide/force-fields/#performance-considerations","title":"Performance Considerations","text":""},{"location":"user-guide/force-fields/#force-field-speed","title":"Force Field Speed","text":"<p>Relative computational cost:</p> <ol> <li>United atom (fastest, not in PRISM)</li> <li>TIP3P water (standard)</li> <li>TIP4P water (10% slower)</li> <li>Polarizable (2-3x slower, not in PRISM)</li> </ol>"},{"location":"user-guide/force-fields/#optimization-tips","title":"Optimization Tips","text":"<pre><code># For large-scale screening, prioritize speed\nconfig = {\n    \"forcefield\": \"amber99sb\",  # Faster than amber14sb\n    \"ligand_forcefield\": \"gaff\",  # Faster than OpenFF\n    \"water\": \"tip3p\",  # Fastest water model\n    \"constraints\": \"h-bonds\",  # Allows 2 fs timestep\n}\n</code></pre>"},{"location":"user-guide/force-fields/#future-developments","title":"Future Developments","text":""},{"location":"user-guide/force-fields/#coming-to-prism","title":"Coming to PRISM","text":"<ul> <li>Machine learning force fields</li> <li>Automated force field selection</li> <li>QM/MM interfaces</li> </ul>"},{"location":"user-guide/force-fields/#current-alternatives","title":"Current Alternatives","text":"<p>For unsupported force fields: 1. Generate structure with PRISM 2. Convert topology manually 3. Use specialized tools</p>"},{"location":"user-guide/force-fields/#summary","title":"Summary","text":""},{"location":"user-guide/force-fields/#recommended-starting-point","title":"Recommended Starting Point","text":"<p>For most users: <pre><code>prism protein.pdb ligand.mol2 -o output \\\n  --forcefield amber14sb \\\n  --ligand-forcefield gaff \\\n  --water tip3p\n</code></pre></p>"},{"location":"user-guide/force-fields/#when-to-use-what","title":"When to Use What","text":"<ul> <li>GAFF: Standard drug discovery, compatibility with literature</li> <li>OpenFF: Novel chemistry, highest accuracy</li> <li>amber14sb: Modern protein force field</li> <li>amber99sb-ildn: When specifically needed for comparison</li> <li>charmm36: Membranes, lipids, carbohydrates</li> </ul>"},{"location":"user-guide/force-fields/#next-steps","title":"Next Steps","text":"<ul> <li>Build your system</li> <li>Run simulations</li> <li>Analyze results</li> </ul>"},{"location":"user-guide/input-files/","title":"Input Files Guide","text":"<p>PRISM requires two primary input files: a protein structure and a ligand structure. This guide covers file formats, preparation methods, and best practices for preparing high-quality input files.</p>"},{"location":"user-guide/input-files/#required-input-files","title":"Required Input Files","text":""},{"location":"user-guide/input-files/#protein-structure-pdb","title":"Protein Structure (PDB)","text":"<p>PRISM expects protein structures in PDB format:</p> <pre><code># Basic usage\nprism protein.pdb ligand.mol2 -o output\n\n# Alternative specification\nprism --protein-file protein.pdb --ligand-file ligand.mol2 -o output\n</code></pre> <p>PDB Requirements: - Standard PDB format (<code>.pdb</code> extension) - Should contain only protein atoms (ATOM records) - HETATM records are automatically removed - Missing atoms/residues should be fixed beforehand</p>"},{"location":"user-guide/input-files/#ligand-structure-mol2sdf","title":"Ligand Structure (MOL2/SDF)","text":"<p>PRISM supports two ligand formats:</p> <ul> <li>MOL2 (<code>.mol2</code>): Tripos MOL2 format with charges</li> <li>SDF (<code>.sdf</code>, <code>.sd</code>): Structure Data File format</li> </ul> <pre><code># Using MOL2 with GAFF\nprism protein.pdb ligand.mol2 -o output\n\n# Using SDF with OpenFF\nprism protein.pdb ligand.sdf -o output --ligand-forcefield openff\n</code></pre>"},{"location":"user-guide/input-files/#protein-preparation","title":"Protein Preparation","text":""},{"location":"user-guide/input-files/#1-download-structure","title":"1. Download Structure","text":""},{"location":"user-guide/input-files/#from-pdb-database","title":"From PDB Database","text":"<pre><code># Download directly from PDB\nwget https://files.rcsb.org/download/1ABC.pdb\n\n# Or using PRISM utility (if available)\npython -c \"\nfrom prism.utils import download_pdb\ndownload_pdb('1ABC', 'protein.pdb')\n\"\n</code></pre>"},{"location":"user-guide/input-files/#from-alphafold","title":"From AlphaFold","text":"<pre><code># Download AlphaFold structure\nwget https://alphafold.ebi.ac.uk/files/AF-P12345-F1-model_v4.pdb\n</code></pre>"},{"location":"user-guide/input-files/#2-clean-the-structure","title":"2. Clean the Structure","text":"<p>PRISM automatically cleans basic issues, but pre-cleaning is recommended:</p>"},{"location":"user-guide/input-files/#remove-non-protein-atoms","title":"Remove Non-Protein Atoms","text":"<pre><code># Remove water, ions, and ligands\ngrep \"^ATOM\" input.pdb &gt; protein_clean.pdb\n\n# Or using pymol\npymol -c -d \"\nload input.pdb;\nremove resn HOH+WAT+NA+CL+SO4;\nremove hetatm and not resn MSE;\nsave protein_clean.pdb;\nquit\n\"\n</code></pre>"},{"location":"user-guide/input-files/#using-pdbfixer-recommended","title":"Using PDBFixer (Recommended)","text":"<pre><code>from pdbfixer import PDBFixer\nfrom openmm.app import PDBFile\n\n# Load and fix structure\nfixer = PDBFixer(filename='input.pdb')\n\n# Find and add missing residues\nfixer.findMissingResidues()\nfixer.findMissingAtoms()\nfixer.addMissingAtoms()\n\n# Add missing hydrogens at pH 7.0\nfixer.addMissingHydrogens(7.0)\n\n# Save cleaned structure\nwith open('protein_clean.pdb', 'w') as f:\n    PDBFile.writeFile(fixer.topology, fixer.positions, f)\n</code></pre>"},{"location":"user-guide/input-files/#3-handle-special-cases","title":"3. Handle Special Cases","text":""},{"location":"user-guide/input-files/#multiple-chains","title":"Multiple Chains","text":"<pre><code># Keep only chain A\nfrom Bio import PDB\n\nparser = PDB.PDBParser()\nstructure = parser.get_structure('protein', 'input.pdb')\n\n# Extract chain A\nchain_a = structure[0]['A']\n\n# Save chain A\nio = PDB.PDBIO()\nio.set_structure(chain_a)\nio.save('protein_chainA.pdb')\n</code></pre>"},{"location":"user-guide/input-files/#mutations","title":"Mutations","text":"<pre><code># Using pymol for mutations\npymol -c -d \"\nload protein.pdb;\nwizard mutagenesis;\nmutation A/123/ALA;\nsave protein_mutant.pdb;\nquit\n\"\n</code></pre>"},{"location":"user-guide/input-files/#missing-loops","title":"Missing Loops","text":"<p>For missing loops, use modeling tools before PRISM:</p> <pre><code># Using MODELLER (requires license)\npython model_loops.py\n\n# Or use online servers:\n# - SWISS-MODEL: https://swissmodel.expasy.org\n# - ModLoop: https://modbase.compbio.ucsf.edu/modloop/\n</code></pre>"},{"location":"user-guide/input-files/#ligand-preparation","title":"Ligand Preparation","text":""},{"location":"user-guide/input-files/#1-mol2-format-preparation","title":"1. MOL2 Format Preparation","text":""},{"location":"user-guide/input-files/#from-smiles","title":"From SMILES","text":"<pre><code>from rdkit import Chem\nfrom rdkit.Chem import AllChem\n\n# Create molecule from SMILES\nsmiles = \"CC(=O)Nc1ccc(cc1)O\"  # Paracetamol\nmol = Chem.MolFromSmiles(smiles)\n\n# Add hydrogens\nmol = Chem.AddHs(mol)\n\n# Generate 3D coordinates\nAllChem.EmbedMolecule(mol, randomSeed=42)\nAllChem.MMFFOptimizeMolecule(mol)\n\n# Save as SDF (then convert to MOL2)\nwriter = Chem.SDWriter('ligand.sdf')\nwriter.write(mol)\nwriter.close()\n\n# Convert to MOL2 using OpenBabel\nimport subprocess\nsubprocess.run(['obabel', '-isdf', 'ligand.sdf', \n                '-omol2', '-O', 'ligand.mol2'])\n</code></pre>"},{"location":"user-guide/input-files/#from-pubchem","title":"From PubChem","text":"<pre><code># Download SDF from PubChem (e.g., aspirin CID 2244)\nwget https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/2244/SDF -O aspirin.sdf\n\n# Convert to MOL2\nobabel -isdf aspirin.sdf -omol2 -O aspirin.mol2\n</code></pre>"},{"location":"user-guide/input-files/#from-pdb-ligand","title":"From PDB Ligand","text":"<pre><code># Extract ligand from PDB complex\nfrom pymol import cmd\n\ncmd.load('complex.pdb')\ncmd.select('ligand', 'resn LIG')  # Replace LIG with actual residue name\ncmd.save('ligand.mol2', 'ligand')\n</code></pre>"},{"location":"user-guide/input-files/#2-sdf-format-preparation","title":"2. SDF Format Preparation","text":""},{"location":"user-guide/input-files/#using-rdkit","title":"Using RDKit","text":"<pre><code>from rdkit import Chem\nfrom rdkit.Chem import AllChem\n\n# Load molecule\nmol = Chem.MolFromSmiles('CC(C)CC1=CC=CC=C1')\n\n# Prepare 3D structure\nmol = Chem.AddHs(mol)\nAllChem.EmbedMolecule(mol)\nAllChem.MMFFOptimizeMolecule(mol)\n\n# Save as SDF\nwriter = Chem.SDWriter('ligand.sdf')\nwriter.write(mol)\nwriter.close()\n</code></pre>"},{"location":"user-guide/input-files/#with-charges-for-openff","title":"With Charges (for OpenFF)","text":"<pre><code># OpenFF can calculate charges automatically\n# But you can pre-calculate if needed\n\nfrom openff.toolkit.topology import Molecule\n\n# Load molecule\nmol = Molecule.from_smiles('CC(=O)Nc1ccc(cc1)O')\n\n# Generate conformer\nmol.generate_conformers(n_conformers=1)\n\n# Assign AM1-BCC charges\nmol.assign_partial_charges('am1bcc')\n\n# Save with charges\nmol.to_file('ligand_charged.sdf', file_format='SDF')\n</code></pre>"},{"location":"user-guide/input-files/#3-charge-assignment","title":"3. Charge Assignment","text":""},{"location":"user-guide/input-files/#for-gaff-mol2","title":"For GAFF (MOL2)","text":"<p>PRISM automatically calculates AM1-BCC charges, but you can pre-calculate:</p> <pre><code># Using antechamber\nantechamber -i ligand.mol2 -fi mol2 \\\n            -o ligand_charged.mol2 -fo mol2 \\\n            -c bcc -nc 0  # nc = net charge\n</code></pre>"},{"location":"user-guide/input-files/#for-openff-sdf","title":"For OpenFF (SDF)","text":"<p>OpenFF handles charges automatically, but manual control is possible:</p> <pre><code>from openff.toolkit.topology import Molecule\n\nmol = Molecule.from_file('ligand.sdf')\nmol.assign_partial_charges('am1bccelf10')  # Latest charge model\nmol.to_file('ligand_charged.sdf')\n</code></pre>"},{"location":"user-guide/input-files/#file-format-specifications","title":"File Format Specifications","text":""},{"location":"user-guide/input-files/#pdb-format-requirements","title":"PDB Format Requirements","text":"<pre><code>ATOM      1  N   MET A   1      -8.901   4.127  -0.321  1.00 10.00           N\nATOM      2  CA  MET A   1      -8.608   4.135   1.107  1.00 10.00           C\n</code></pre> <p>Column definitions: - 1-6: Record name (ATOM) - 7-11: Atom serial number - 13-16: Atom name - 17: Alternate location - 18-20: Residue name - 22: Chain identifier - 23-26: Residue sequence number - 31-38: X coordinate - 39-46: Y coordinate - 47-54: Z coordinate - 55-60: Occupancy - 61-66: Temperature factor - 77-78: Element symbol</p>"},{"location":"user-guide/input-files/#mol2-format-structure","title":"MOL2 Format Structure","text":"<pre><code>@&lt;TRIPOS&gt;MOLECULE\nligand_name\n   24    25     1     0     0\nSMALL\nGASTEIGER\n\n@&lt;TRIPOS&gt;ATOM\n      1 C1         -0.7560    0.5450    0.0000 C.3     1 LIG        -0.0653\n      2 C2          0.7560    0.5450    0.0000 C.ar    1 LIG        -0.0177\n\n@&lt;TRIPOS&gt;BOND\n     1     1     2 1\n     2     2     3 ar\n</code></pre>"},{"location":"user-guide/input-files/#sdf-format-structure","title":"SDF Format Structure","text":"<pre><code>ligand_name\n  RDKit          3D\n\n 24 25  0  0  0  0  0  0  0  0999 V2000\n   -0.7560    0.5450    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.7560    0.5450    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n...\n  1  2  1  0\n  2  3  2  0\nM  END\n$$$$\n</code></pre>"},{"location":"user-guide/input-files/#quality-checks","title":"Quality Checks","text":""},{"location":"user-guide/input-files/#protein-structure-validation","title":"Protein Structure Validation","text":"<pre><code># Check for missing atoms\nfrom Bio.PDB import PDBParser, PPBuilder\n\nparser = PDBParser()\nstructure = parser.get_structure('protein', 'protein.pdb')\n\n# Check for gaps in sequence\nppb = PPBuilder()\nfor pp in ppb.build_peptides(structure):\n    seq = pp.get_sequence()\n    print(f\"Chain sequence: {seq}\")\n\n# Check for clashes\nfrom Bio.PDB import NeighborSearch\n\natoms = list(structure.get_atoms())\nns = NeighborSearch(atoms)\nclashes = ns.search_all(1.5)  # Find atoms closer than 1.5 \u00c5\nprint(f\"Found {len(clashes)} clashes\")\n</code></pre>"},{"location":"user-guide/input-files/#ligand-structure-validation","title":"Ligand Structure Validation","text":"<pre><code>from rdkit import Chem\nfrom rdkit.Chem import Descriptors\n\n# Load ligand\nmol = Chem.MolFromMol2File('ligand.mol2')\n\n# Basic checks\nprint(f\"Molecular weight: {Descriptors.MolWt(mol):.2f}\")\nprint(f\"LogP: {Descriptors.MolLogP(mol):.2f}\")\nprint(f\"Rotatable bonds: {Descriptors.NumRotatableBonds(mol)}\")\nprint(f\"H-bond donors: {Descriptors.NumHDonors(mol)}\")\nprint(f\"H-bond acceptors: {Descriptors.NumHAcceptors(mol)}\")\n\n# Check for problems\nproblems = Chem.DetectChemistryProblems(mol)\nif problems:\n    print(\"Chemistry problems detected:\")\n    for problem in problems:\n        print(f\"  - {problem.GetType()}: {problem.Message()}\")\n</code></pre>"},{"location":"user-guide/input-files/#common-input-file-issues","title":"Common Input File Issues","text":""},{"location":"user-guide/input-files/#problem-missing-residues","title":"Problem: Missing Residues","text":"<p>Symptoms: Gaps in protein structure Solution: Use modeling tools or PDBFixer</p> <pre><code># Using PDBFixer\nfrom pdbfixer import PDBFixer\n\nfixer = PDBFixer(filename='protein.pdb')\nfixer.findMissingResidues()\nprint(f\"Missing residues: {fixer.missingResidues}\")\n\n# Add missing residues\nfixer.findMissingAtoms()\nfixer.addMissingAtoms()\n</code></pre>"},{"location":"user-guide/input-files/#problem-incorrect-protonation","title":"Problem: Incorrect Protonation","text":"<p>Symptoms: Wrong charges, simulation crashes Solution: Set correct pH during preparation</p> <pre><code># For protein (using pdb2pqr)\npdb2pqr30 --ph=7.0 --pdb-output protein_ph7.pdb protein.pdb\n\n# For ligand (using antechamber)\nantechamber -i ligand.mol2 -fi mol2 -o ligand_charged.mol2 -fo mol2 -c bcc\n</code></pre>"},{"location":"user-guide/input-files/#problem-non-standard-residues","title":"Problem: Non-standard Residues","text":"<p>Symptoms: PRISM doesn't recognize residue Solution: Convert or parameterize separately</p> <pre><code># Convert selenomethionine to methionine\nsed 's/MSE/MET/g' protein.pdb &gt; protein_fixed.pdb\n</code></pre>"},{"location":"user-guide/input-files/#problem-alternative-conformations","title":"Problem: Alternative Conformations","text":"<p>Symptoms: Multiple positions for same atom Solution: Keep only one conformation</p> <pre><code># Remove alternative conformations (keep A)\ngrep -v '^ATOM.*[B-Z] [A-Z][A-Z][A-Z]' protein.pdb &gt; protein_fixed.pdb\n</code></pre>"},{"location":"user-guide/input-files/#advanced-input-preparation","title":"Advanced Input Preparation","text":""},{"location":"user-guide/input-files/#multi-component-systems","title":"Multi-Component Systems","text":"<p>For systems with multiple ligands or cofactors:</p> <pre><code># Prepare each component separately\nprism protein.pdb ligand1.mol2 -o temp1 --ligand-forcefield gaff\nprism protein.pdb ligand2.mol2 -o temp2 --ligand-forcefield gaff\n\n# Then combine topologies manually\n# (Advanced - see Advanced Usage guide)\n</code></pre>"},{"location":"user-guide/input-files/#covalent-ligands","title":"Covalent Ligands","text":"<p>For covalently bound ligands:</p> <ol> <li>Keep ligand with protein in PDB</li> <li>Define custom parameters</li> <li>Use specialized tools (e.g., CGenFF for CHARMM)</li> </ol>"},{"location":"user-guide/input-files/#metal-centers","title":"Metal Centers","text":"<p>For metalloproteins:</p> <pre><code># Keep metal ions in protein PDB\n# PRISM will handle standard ions (Zn2+, Mg2+, etc.)\n# For complex metal centers, use specialized force fields\n</code></pre>"},{"location":"user-guide/input-files/#best-practices","title":"Best Practices","text":"<ol> <li>Always visualize: Check structures in PyMOL/ChimeraX before using</li> <li>Verify chemistry: Ensure correct bond orders and charges</li> <li>Check stereochemistry: Verify chirality is correct</li> <li>Document preparation: Save all preparation steps for reproducibility</li> <li>Test with small systems: Validate protocol with simple cases first</li> </ol>"},{"location":"user-guide/input-files/#quality-control-checklist","title":"Quality Control Checklist","text":"<p>Before running PRISM, verify:</p> <ul> <li> Protein has all residues (no gaps)</li> <li> All atoms present (no missing side chains)</li> <li> Correct protonation state</li> <li> No clashes (&lt;1.5 \u00c5 between atoms)</li> <li> Ligand has correct charge</li> <li> Ligand has reasonable geometry</li> <li> File formats are correct</li> <li> Files are in the same directory or paths are correct</li> </ul>"},{"location":"user-guide/input-files/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Building Systems</li> <li>Understand Force Fields selection</li> <li>Configure your simulation parameters</li> </ul>"},{"location":"user-guide/output-files/","title":"Output Files Guide","text":"<p>Understanding PRISM's output structure is essential for analysis and troubleshooting. This guide details all files generated during system building and simulation.</p>"},{"location":"user-guide/output-files/#output-directory-structure","title":"Output Directory Structure","text":"<pre><code>output_directory/\n\u251c\u2500\u2500 GMX_PROLIG_MD/          # Main simulation directory\n\u2502   \u251c\u2500\u2500 solv_ions.gro       # Solvated system structure\n\u2502   \u251c\u2500\u2500 topol.top           # System topology\n\u2502   \u251c\u2500\u2500 index.ndx           # Index groups\n\u2502   \u251c\u2500\u2500 em/                 # Energy minimization\n\u2502   \u251c\u2500\u2500 nvt/                # NVT equilibration\n\u2502   \u251c\u2500\u2500 npt/                # NPT equilibration\n\u2502   \u2514\u2500\u2500 prod/               # Production MD\n\u251c\u2500\u2500 LIG.amb2gmx/            # Ligand force field (GAFF)\n\u2502   \u251c\u2500\u2500 LIG.gro             # Ligand structure\n\u2502   \u251c\u2500\u2500 LIG.itp             # Ligand topology\n\u2502   \u251c\u2500\u2500 LIG.top             # Full topology\n\u2502   \u251c\u2500\u2500 atomtypes_LIG.itp   # Atom type definitions\n\u2502   \u2514\u2500\u2500 posre_LIG.itp       # Position restraints\n\u251c\u2500\u2500 mdps/                   # MDP parameter files\n\u2502   \u251c\u2500\u2500 em.mdp              # Energy minimization\n\u2502   \u251c\u2500\u2500 nvt.mdp             # NVT equilibration\n\u2502   \u251c\u2500\u2500 npt.mdp             # NPT equilibration\n\u2502   \u2514\u2500\u2500 md.mdp              # Production MD\n\u251c\u2500\u2500 forcefield/             # Temporary force field files\n\u251c\u2500\u2500 protein_clean.pdb       # Cleaned protein structure\n\u2514\u2500\u2500 prism_config.yaml       # Configuration used\n</code></pre>"},{"location":"user-guide/output-files/#core-system-files","title":"Core System Files","text":""},{"location":"user-guide/output-files/#solv_ionsgro","title":"solv_ions.gro","text":"<p>The complete solvated system with ions:</p> <pre><code>Protein-Ligand Complex in Water\n47593\n    1MET      N    1   2.345   1.234   0.567\n    1MET     CA    2   2.456   1.345   0.678\n    ...\n47591SOL    HW2 47593  10.234   9.876   8.543\n  10.12345  10.12345  10.12345\n</code></pre> <p>Format: GROMACS coordinate file - Line 1: Title - Line 2: Number of atoms - Lines 3-n: Atom information - Last line: Box vectors</p> <p>Usage: <pre><code>import mdtraj as md\n\n# Load structure\nstructure = md.load(\"GMX_PROLIG_MD/solv_ions.gro\")\nprint(f\"Atoms: {structure.n_atoms}\")\nprint(f\"Box: {structure.unitcell_vectors}\")\n</code></pre></p>"},{"location":"user-guide/output-files/#topoltop","title":"topol.top","text":"<p>Master topology file:</p> <pre><code>; System topology for GROMACS\n; Generated by PRISM\n\n#include \"amber99sb.ff/forcefield.itp\"\n\n; Ligand parameters\n#include \"../LIG.amb2gmx/atomtypes_LIG.itp\"\n#include \"../LIG.amb2gmx/LIG.itp\"\n\n; Water and ions\n#include \"amber99sb.ff/tip3p.itp\"\n#include \"amber99sb.ff/ions.itp\"\n\n[ system ]\nProtein-Ligand Complex\n\n[ molecules ]\nProtein_chain_A    1\nLIG                1\nSOL             14523\nNA                 42\nCL                 38\n</code></pre> <p>Components: - Force field includes - Ligand parameters - Molecule list with counts</p>"},{"location":"user-guide/output-files/#ligand-force-field-files","title":"Ligand Force Field Files","text":""},{"location":"user-guide/output-files/#ligitp-gaff","title":"LIG.itp (GAFF)","text":"<p>Ligand topology with all parameters:</p> <pre><code>[ moleculetype ]\n; Name            nrexcl\nLIG                3\n\n[ atoms ]\n;   nr       type  resnr residue  atom   cgnr     charge       mass\n     1         c3      1    LIG     C1      1   -0.094100    12.010\n     2         c3      1    LIG     C2      2    0.142900    12.010\n\n[ bonds ]\n;  ai    aj funct    c0    c1\n    1     2     1  0.15375  259408.0\n\n[ angles ]\n;  ai    aj    ak funct    c0    c1\n    1     2     3     1  109.50  418.40\n\n[ dihedrals ]\n;  ai    aj    ak    al funct    c0    c1    c2    c3    c4    c5\n    1     2     3     4     9  0.0  0.65084  3\n\n#ifdef POSRES\n#include \"posre_LIG.itp\"\n#endif\n</code></pre>"},{"location":"user-guide/output-files/#liggro","title":"LIG.gro","text":"<p>Ligand coordinates:</p> <pre><code>LIG\n   42\n    1LIG     C1    1   0.123   0.456   0.789\n    1LIG     C2    2   0.234   0.567   0.890\n    ...\n   1.50000   1.50000   1.50000\n</code></pre>"},{"location":"user-guide/output-files/#atomtypes_ligitp","title":"atomtypes_LIG.itp","text":"<p>Atom type definitions:</p> <pre><code>[ atomtypes ]\n; name    at.num    mass    charge   ptype   sigma   epsilon\nc3          6      12.010    0.000     A    0.33996   0.45773\nca          6      12.010    0.000     A    0.33996   0.35982\n</code></pre>"},{"location":"user-guide/output-files/#mdp-parameter-files","title":"MDP Parameter Files","text":""},{"location":"user-guide/output-files/#emmdp-energy-minimization","title":"em.mdp (Energy Minimization)","text":"<pre><code>; Energy Minimization Parameters\nintegrator  = steep         ; Steepest descent\nemtol       = 200.0        ; kJ/mol/nm\nemstep      = 0.01         ; Step size\nnsteps      = 10000        ; Maximum steps\n\n; Output\nnstxout     = 100          ; Coordinates\nnstenergy   = 100          ; Energies\nnstlog      = 100          ; Log file\n</code></pre>"},{"location":"user-guide/output-files/#nvtmdp-nvt-equilibration","title":"nvt.mdp (NVT Equilibration)","text":"<pre><code>; NVT Equilibration\nintegrator  = md           ; Molecular dynamics\ndt          = 0.002        ; 2 fs\nnsteps      = 250000       ; 500 ps\n\n; Temperature coupling\ntcoupl      = V-rescale    ; Thermostat\ntc-grps     = Protein Non-Protein\ntau_t       = 0.1    0.1   ; Coupling time\nref_t       = 310    310   ; Target temperature\n\n; Constraints\nconstraints = h-bonds      ; Hydrogen bonds\nconstraint_algorithm = lincs\n</code></pre>"},{"location":"user-guide/output-files/#nptmdp-npt-equilibration","title":"npt.mdp (NPT Equilibration)","text":"<pre><code>; NPT Equilibration\npcoupl      = C-rescale    ; Barostat\npcoupltype  = isotropic    ; Coupling type\ntau_p       = 1.0          ; Coupling time\nref_p       = 1.0          ; Target pressure\ncompressibility = 4.5e-5   ; Water compressibility\n\n; Continue from NVT\ncontinuation = yes         ; Continue from NVT\ngen_vel     = no          ; Don't generate velocities\n</code></pre>"},{"location":"user-guide/output-files/#mdmdp-production","title":"md.mdp (Production)","text":"<pre><code>; Production MD\nnsteps      = 250000000    ; 500 ns\ndt          = 0.002        ; 2 fs\n\n; Output control\nnstxout-compressed = 250000  ; 500 ps\ncompressed-x-grps  = System\nnstenergy         = 5000     ; 10 ps\nnstlog            = 5000     ; 10 ps\n</code></pre>"},{"location":"user-guide/output-files/#simulation-output-files","title":"Simulation Output Files","text":""},{"location":"user-guide/output-files/#energy-minimization","title":"Energy Minimization","text":"<pre><code>em/\n\u251c\u2500\u2500 em.tpr          # Binary run input file\n\u251c\u2500\u2500 em.gro          # Minimized structure\n\u251c\u2500\u2500 em.edr          # Energy file\n\u251c\u2500\u2500 em.log          # Log file\n\u2514\u2500\u2500 em.trr          # Full trajectory (optional)\n</code></pre> <p>Check minimization: <pre><code># View final energy\ngrep \"Potential Energy\" em/em.log | tail -1\n\n# Extract energy profile\ngmx energy -f em/em.edr -o em_energy.xvg\n</code></pre></p>"},{"location":"user-guide/output-files/#equilibration-files","title":"Equilibration Files","text":"<pre><code>nvt/\n\u251c\u2500\u2500 nvt.tpr         # Run input\n\u251c\u2500\u2500 nvt.gro         # Final structure\n\u251c\u2500\u2500 nvt.edr         # Energies\n\u251c\u2500\u2500 nvt.log         # Log file\n\u251c\u2500\u2500 nvt.cpt         # Checkpoint\n\u2514\u2500\u2500 nvt.trr         # Trajectory (optional)\n\nnpt/\n\u251c\u2500\u2500 npt.tpr\n\u251c\u2500\u2500 npt.gro\n\u251c\u2500\u2500 npt.edr\n\u251c\u2500\u2500 npt.log\n\u251c\u2500\u2500 npt.cpt\n\u2514\u2500\u2500 npt.trr\n</code></pre>"},{"location":"user-guide/output-files/#production-files","title":"Production Files","text":"<pre><code>prod/\n\u251c\u2500\u2500 md.tpr          # Run input\n\u251c\u2500\u2500 md.xtc          # Compressed trajectory\n\u251c\u2500\u2500 md.gro          # Final structure\n\u251c\u2500\u2500 md.edr          # Energy data\n\u251c\u2500\u2500 md.log          # Simulation log\n\u251c\u2500\u2500 md.cpt          # Checkpoint file\n\u2514\u2500\u2500 md_pullx.xvg    # Pull data (if applicable)\n</code></pre>"},{"location":"user-guide/output-files/#file-formats-explained","title":"File Formats Explained","text":""},{"location":"user-guide/output-files/#tpr-files","title":"TPR Files","text":"<p>Binary run input files containing: - Complete system topology - Initial coordinates - Simulation parameters - Velocities (if present)</p> <p>Usage: <pre><code># View TPR contents\ngmx dump -s md.tpr | less\n\n# Extract structure\ngmx editconf -f md.tpr -o structure.pdb\n</code></pre></p>"},{"location":"user-guide/output-files/#xtctrr-trajectories","title":"XTC/TRR Trajectories","text":"<p>XTC: Compressed trajectory (positions only) - Smaller file size - Lossy compression - Standard for analysis</p> <p>TRR: Full trajectory (positions, velocities, forces) - Larger files - Complete information - Needed for some analyses</p> <pre><code># Load trajectories\nimport mdtraj as md\n\n# XTC (compressed)\ntraj = md.load(\"prod/md.xtc\", top=\"prod/md.tpr\")\n\n# TRR (full precision)\ntraj_full = md.load(\"nvt/nvt.trr\", top=\"nvt/nvt.tpr\")\n</code></pre>"},{"location":"user-guide/output-files/#edr-energy-files","title":"EDR Energy Files","text":"<p>Binary files containing energies and system properties:</p> <pre><code># Extract properties\ngmx energy -f md.edr &lt;&lt; EOF\nPotential\nKinetic-En.\nTotal-Energy\nTemperature\nPressure\nBox-X\nBox-Y\nBox-Z\nEOF\n\n# Convert to text\ngmx energy -f md.edr -o energy.xvg\n</code></pre>"},{"location":"user-guide/output-files/#cpt-checkpoint-files","title":"CPT Checkpoint Files","text":"<p>Binary checkpoint for restarting simulations:</p> <pre><code># View checkpoint info\ngmx check -f md.cpt\n\n# Restart from checkpoint\ngmx mdrun -s md.tpr -cpi md.cpt -deffnm md -append\n</code></pre>"},{"location":"user-guide/output-files/#log-files","title":"Log Files","text":""},{"location":"user-guide/output-files/#simulation-logs","title":"Simulation Logs","text":"<p>Example log file structure:</p> <pre><code>Log file opened on Mon Sep  1 10:00:00 2024\n\nGROMACS version:    2024.1\nPrecision:          mixed\nMemory model:       64 bit\nMPI library:        thread_mpi\n\nRunning on 1 node with total 12 cores, 24 logical cores, 1 compatible GPU\n\nUsing 1 MPI thread and 10 OpenMP threads\n\n    Step           Time\n       0        0.00000\n\n   Energies (kJ/mol)\n          Angle    Proper Dih.  Improper Dih.          LJ-14     Coulomb-14\n    1.23456e+03    2.34567e+03    3.45678e+02    4.56789e+03    5.67890e+04\n\nPerformance: 45.2 ns/day\n</code></pre> <p>Parse performance: <pre><code>def parse_performance(log_file):\n    with open(log_file) as f:\n        for line in f:\n            if \"Performance:\" in line:\n                ns_per_day = float(line.split()[1])\n                return ns_per_day\n    return None\n\nperf = parse_performance(\"prod/md.log\")\nprint(f\"Speed: {perf} ns/day\")\n</code></pre></p>"},{"location":"user-guide/output-files/#configuration-files","title":"Configuration Files","text":""},{"location":"user-guide/output-files/#prism_configyaml","title":"prism_config.yaml","text":"<p>Saved configuration for reproducibility:</p> <pre><code>general:\n  overwrite: false\n\nbox:\n  distance: 1.5\n  shape: cubic\n  center: true\n\nsimulation:\n  temperature: 310\n  pressure: 1.0\n  pH: 7.0\n  ligand_charge: 0\n  production_time_ns: 500\n\nforcefield:\n  protein: amber14sb\n  ligand: gaff\n  water: tip3p\n</code></pre>"},{"location":"user-guide/output-files/#analysis-output-files","title":"Analysis Output Files","text":""},{"location":"user-guide/output-files/#contact_analysishtml","title":"contact_analysis.html","text":"<p>Interactive visualization with: - 2D/3D molecular viewer - Contact frequency data - Export capabilities</p>"},{"location":"user-guide/output-files/#analysis-data-files","title":"Analysis Data Files","text":"<pre><code>analysis/\n\u251c\u2500\u2500 rmsd.xvg        # RMSD over time\n\u251c\u2500\u2500 rmsf.xvg        # RMSF per residue\n\u251c\u2500\u2500 energy.xvg      # Energy components\n\u251c\u2500\u2500 contacts.csv    # Contact analysis\n\u2514\u2500\u2500 hbonds.dat      # Hydrogen bonds\n</code></pre>"},{"location":"user-guide/output-files/#working-with-output-files","title":"Working with Output Files","text":""},{"location":"user-guide/output-files/#check-file-integrity","title":"Check File Integrity","text":"<pre><code>import os\nfrom pathlib import Path\n\ndef check_output_files(output_dir):\n    \"\"\"Check if all expected files exist\"\"\"\n\n    required_files = {\n        'GMX_PROLIG_MD/solv_ions.gro': 'Solvated system',\n        'GMX_PROLIG_MD/topol.top': 'Topology',\n        'mdps/em.mdp': 'EM parameters',\n        'mdps/nvt.mdp': 'NVT parameters',\n        'mdps/npt.mdp': 'NPT parameters',\n        'mdps/md.mdp': 'Production parameters'\n    }\n\n    missing = []\n    for file, description in required_files.items():\n        full_path = Path(output_dir) / file\n        if not full_path.exists():\n            missing.append(f\"{file} ({description})\")\n\n    if missing:\n        print(\"Missing files:\")\n        for file in missing:\n            print(f\"  - {file}\")\n    else:\n        print(\"All required files present\")\n\n    return len(missing) == 0\n\n# Check\ncheck_output_files(\"output\")\n</code></pre>"},{"location":"user-guide/output-files/#file-size-management","title":"File Size Management","text":"<pre><code>def get_directory_size(path):\n    \"\"\"Calculate total size of directory\"\"\"\n    total = 0\n    for dirpath, dirnames, filenames in os.walk(path):\n        for filename in filenames:\n            filepath = os.path.join(dirpath, filename)\n            total += os.path.getsize(filepath)\n    return total / (1024**3)  # GB\n\n# Check sizes\nprint(f\"Total size: {get_directory_size('output'):.2f} GB\")\nprint(f\"Trajectory: {os.path.getsize('output/GMX_PROLIG_MD/prod/md.xtc')/(1024**3):.2f} GB\")\n</code></pre>"},{"location":"user-guide/output-files/#compress-output","title":"Compress Output","text":"<pre><code># Compress trajectory\ngmx trjconv -f md.xtc -o md_compressed.xtc -dt 10\n\n# Archive results\ntar czf simulation_results.tar.gz output/\n\n# Selective archiving (exclude large files)\ntar czf analysis_only.tar.gz \\\n  --exclude='*.xtc' \\\n  --exclude='*.trr' \\\n  output/\n</code></pre>"},{"location":"user-guide/output-files/#data-extraction","title":"Data Extraction","text":""},{"location":"user-guide/output-files/#extract-specific-frames","title":"Extract Specific Frames","text":"<pre><code># Extract every 100th frame\ngmx trjconv -f md.xtc -o sampled.xtc -skip 100\n\n# Extract time range (100-200 ns)\ngmx trjconv -f md.xtc -o segment.xtc -b 100000 -e 200000\n\n# Extract final frame\ngmx trjconv -f md.xtc -s md.tpr -o final.pdb -dump 500000\n</code></pre>"},{"location":"user-guide/output-files/#convert-formats","title":"Convert Formats","text":"<pre><code># Convert to PDB (for visualization)\ngmx trjconv -f md.gro -s md.tpr -o structure.pdb\n\n# Convert trajectory to PDB (warning: large file)\ngmx trjconv -f md.xtc -s md.tpr -o trajectory.pdb\n\n# Convert to DCD (for VMD)\ngmx trjconv -f md.xtc -o trajectory.dcd\n</code></pre>"},{"location":"user-guide/output-files/#clean-up","title":"Clean Up","text":""},{"location":"user-guide/output-files/#remove-temporary-files","title":"Remove Temporary Files","text":"<pre><code>def cleanup_temporary_files(output_dir):\n    \"\"\"Remove temporary and backup files\"\"\"\n\n    patterns = [\n        '#*#',      # Emacs backups\n        '*~',       # Backup files\n        '*.log.*',  # Old log files\n        'step*.pdb' # Intermediate PDB files\n    ]\n\n    from pathlib import Path\n    import glob\n\n    for pattern in patterns:\n        for file in Path(output_dir).rglob(pattern):\n            print(f\"Removing: {file}\")\n            file.unlink()\n\n# Clean\ncleanup_temporary_files(\"output\")\n</code></pre>"},{"location":"user-guide/output-files/#archive-project","title":"Archive Project","text":"<pre><code>import shutil\nfrom datetime import datetime\n\ndef archive_project(output_dir):\n    \"\"\"Create project archive with timestamp\"\"\"\n\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    archive_name = f\"prism_project_{timestamp}\"\n\n    # Create archive\n    shutil.make_archive(\n        archive_name,\n        'tar',\n        output_dir\n    )\n\n    print(f\"Created archive: {archive_name}.tar\")\n    return f\"{archive_name}.tar\"\n\n# Archive\narchive_project(\"output\")\n</code></pre>"},{"location":"user-guide/output-files/#best-practices","title":"Best Practices","text":"<ol> <li>Regular Backups: Save checkpoint files frequently</li> <li>Compression: Use XTC format for trajectories</li> <li>Documentation: Keep prism_config.yaml with results</li> <li>Version Control: Track MDP files and configurations</li> <li>Data Management: Remove unnecessary temporary files</li> <li>Metadata: Document file contents and parameters</li> </ol>"},{"location":"user-guide/output-files/#next-steps","title":"Next Steps","text":"<ul> <li>Learn Advanced Usage techniques</li> <li>Troubleshoot issues with Troubleshooting Guide</li> <li>Return to User Guide Overview</li> </ul>"},{"location":"user-guide/running-simulations/","title":"Running Simulations","text":"<p>After building your system with PRISM, you can run molecular dynamics simulations using either GROMACS or OpenMM. This guide covers both approaches and best practices.</p>"},{"location":"user-guide/running-simulations/#quick-start","title":"Quick Start","text":""},{"location":"user-guide/running-simulations/#using-gromacs-recommended","title":"Using GROMACS (Recommended)","text":"<pre><code>import prism\n\n# Load the built system\nsim = prism.model(\"output/GMX_PROLIG_MD\")\n\n# Run with GROMACS\nresults = sim.run(engine=\"gmx\")\n</code></pre>"},{"location":"user-guide/running-simulations/#using-openmm","title":"Using OpenMM","text":"<pre><code># Run with OpenMM (requires OpenMM installation)\nresults = sim.run(engine=\"openmm\", platform=\"CUDA\")\n</code></pre>"},{"location":"user-guide/running-simulations/#command-line-execution","title":"Command-Line Execution","text":"<pre><code># Navigate to simulation directory\ncd output/GMX_PROLIG_MD\n\n# Run the provided script\nbash localrun.sh\n</code></pre>"},{"location":"user-guide/running-simulations/#simulation-protocol","title":"Simulation Protocol","text":"<p>PRISM runs a standard 4-stage protocol:</p> <ol> <li>Energy Minimization (EM) - Remove clashes</li> <li>NVT Equilibration - Equilibrate temperature</li> <li>NPT Equilibration - Equilibrate pressure</li> <li>Production MD - Collect data</li> </ol>"},{"location":"user-guide/running-simulations/#using-the-simulation-module","title":"Using the Simulation Module","text":""},{"location":"user-guide/running-simulations/#basic-usage","title":"Basic Usage","text":"<pre><code>import prism\n\n# Create simulation model from built system\nsim = prism.model(\"output/GMX_PROLIG_MD\")\n\n# Check system information\nsim.info()\n\n# Run all stages\nresults = sim.run(engine=\"gmx\")\n\n# Access output files\nprint(f\"Trajectory: {results['prod']['xtc']}\")\nprint(f\"Final structure: {results['prod']['gro']}\")\n</code></pre>"},{"location":"user-guide/running-simulations/#stage-control","title":"Stage Control","text":"<p>Run specific stages only:</p> <pre><code># Run only equilibration\nresults = sim.run(\n    engine=\"gmx\",\n    stages=[\"em\", \"nvt\", \"npt\"]  # Skip production\n)\n\n# Run only production (if equilibration done)\nresults = sim.run(\n    engine=\"gmx\",\n    stages=[\"prod\"]\n)\n</code></pre>"},{"location":"user-guide/running-simulations/#gpu-acceleration","title":"GPU Acceleration","text":"<pre><code># GROMACS with GPU\nresults = sim.run(\n    engine=\"gmx\",\n    gpu_id=0,  # GPU device ID\n    ntomp=10,  # CPU threads\n    ntmpi=1    # MPI ranks\n)\n\n# OpenMM with CUDA\nresults = sim.run(\n    engine=\"openmm\",\n    platform=\"CUDA\",\n    device_index=0\n)\n</code></pre>"},{"location":"user-guide/running-simulations/#gromacs-engine","title":"GROMACS Engine","text":""},{"location":"user-guide/running-simulations/#configuration-options","title":"Configuration Options","text":"<pre><code># Full control over GROMACS execution\nresults = sim.run(\n    engine=\"gmx\",\n    gpu_id=0,        # GPU to use (-gpu_id)\n    ntomp=15,        # OpenMP threads (-ntomp)\n    ntmpi=1,         # Thread-MPI ranks (-ntmpi)\n    continue_from=None  # Continue from checkpoint\n)\n</code></pre>"},{"location":"user-guide/running-simulations/#generated-script","title":"Generated Script","text":"<p>PRISM creates a <code>localrun.sh</code> script:</p> <pre><code>#!/bin/bash\n\n# Energy Minimization\nmkdir -p em\ngmx grompp -f ../mdps/em.mdp -c solv_ions.gro -r solv_ions.gro \\\n           -p topol.top -o ./em/em.tpr -maxwarn 10\ngmx mdrun -s ./em/em.tpr -deffnm ./em/em -ntmpi 1 -ntomp 10 -gpu_id 0 -v\n\n# NVT Equilibration\nmkdir -p nvt\ngmx grompp -f ../mdps/nvt.mdp -c ./em/em.gro -r ./em/em.gro \\\n           -p topol.top -o ./nvt/nvt.tpr -maxwarn 10\ngmx mdrun -ntmpi 1 -ntomp 15 -nb gpu -bonded gpu -pme gpu \\\n          -gpu_id 0 -s ./nvt/nvt.tpr -deffnm ./nvt/nvt -v\n\n# NPT Equilibration\nmkdir -p npt\ngmx grompp -f ../mdps/npt.mdp -c ./nvt/nvt.gro -r ./nvt/nvt.gro \\\n           -t ./nvt/nvt.cpt -p topol.top -o ./npt/npt.tpr -maxwarn 10\ngmx mdrun -ntmpi 1 -ntomp 15 -nb gpu -bonded gpu -pme gpu \\\n          -gpu_id 0 -s ./npt/npt.tpr -deffnm ./npt/npt -v\n\n# Production\nmkdir -p prod\ngmx grompp -f ../mdps/md.mdp -c ./npt/npt.gro -r ./npt/npt.gro \\\n           -p topol.top -o ./prod/md.tpr -maxwarn 10\ngmx mdrun -ntmpi 1 -ntomp 15 -nb gpu -bonded gpu -pme gpu \\\n          -gpu_id 0 -s ./prod/md.tpr -deffnm ./prod/md -v\n</code></pre>"},{"location":"user-guide/running-simulations/#manual-gromacs-commands","title":"Manual GROMACS Commands","text":"<p>For custom control:</p> <pre><code>cd output/GMX_PROLIG_MD\n\n# Energy minimization with custom settings\ngmx grompp -f ../mdps/em.mdp -c solv_ions.gro -p topol.top -o em.tpr\ngmx mdrun -v -deffnm em -nb gpu -gpu_id 0 -ntomp 8\n\n# Production with specific options\ngmx mdrun -deffnm prod/md \\\n  -nb gpu \\           # Nonbonded on GPU\n  -bonded gpu \\       # Bonded on GPU  \n  -pme gpu \\          # PME on GPU\n  -gpu_id 0 \\         # GPU device\n  -npme 0 \\           # PME ranks (0=auto)\n  -ntomp 10 \\         # OpenMP threads\n  -pin on \\           # Pin threads\n  -pinstride 1        # Pin stride\n</code></pre>"},{"location":"user-guide/running-simulations/#openmm-engine","title":"OpenMM Engine","text":""},{"location":"user-guide/running-simulations/#setup-and-requirements","title":"Setup and Requirements","text":"<pre><code># Check OpenMM availability\nimport prism\n\nsim = prism.model(\"output/GMX_PROLIG_MD\")\n\n# Run with OpenMM\nresults = sim.run(\n    engine=\"openmm\",\n    platform=\"CUDA\",     # or \"OpenCL\", \"CPU\"\n    device_index=0,      # GPU device\n    num_threads=10       # For CPU platform\n)\n</code></pre>"},{"location":"user-guide/running-simulations/#platform-selection","title":"Platform Selection","text":"<pre><code># Auto-select best platform\nresults = sim.run(engine=\"openmm\", platform=\"auto\")\n\n# Force CPU (for testing)\nresults = sim.run(engine=\"openmm\", platform=\"CPU\", num_threads=20)\n\n# Multiple GPUs (OpenMM handles differently than GROMACS)\nresults = sim.run(\n    engine=\"openmm\",\n    platform=\"CUDA\",\n    device_index=\"0,1\"  # Use both GPU 0 and 1\n)\n</code></pre>"},{"location":"user-guide/running-simulations/#openmm-advantages","title":"OpenMM Advantages","text":"<ul> <li>Better Python integration</li> <li>Easier custom forces</li> <li>Direct trajectory analysis</li> <li>No file I/O overhead</li> </ul>"},{"location":"user-guide/running-simulations/#openmm-limitations","title":"OpenMM Limitations","text":"<ul> <li>May need manual topology fixes</li> <li>Less optimized than GROMACS for some systems</li> <li>Different performance characteristics</li> </ul>"},{"location":"user-guide/running-simulations/#monitoring-simulations","title":"Monitoring Simulations","text":""},{"location":"user-guide/running-simulations/#check-progress","title":"Check Progress","text":"<pre><code>import os\nimport time\n\ndef monitor_simulation(gmx_dir):\n    \"\"\"Monitor simulation progress\"\"\"\n\n    log_files = {\n        'em': 'em/em.log',\n        'nvt': 'nvt/nvt.log',\n        'npt': 'npt/npt.log',\n        'prod': 'prod/md.log'\n    }\n\n    for stage, log_file in log_files.items():\n        full_path = os.path.join(gmx_dir, log_file)\n        if os.path.exists(full_path):\n            # Get last line of log\n            with open(full_path, 'r') as f:\n                lines = f.readlines()\n                if lines:\n                    last_line = lines[-1]\n                    if 'Step' in last_line:\n                        print(f\"{stage}: {last_line.strip()}\")\n        else:\n            print(f\"{stage}: Not started\")\n\n# Monitor every 60 seconds\nwhile True:\n    monitor_simulation(\"output/GMX_PROLIG_MD\")\n    time.sleep(60)\n</code></pre>"},{"location":"user-guide/running-simulations/#real-time-analysis","title":"Real-Time Analysis","text":"<pre><code>import mdtraj as md\nimport matplotlib.pyplot as plt\n\ndef plot_rmsd_realtime(traj_file, top_file):\n    \"\"\"Plot RMSD as simulation progresses\"\"\"\n\n    # Load trajectory\n    traj = md.load(traj_file, top=top_file)\n\n    # Calculate RMSD\n    rmsd = md.rmsd(traj, traj[0])\n\n    # Plot\n    plt.figure(figsize=(10, 6))\n    plt.plot(traj.time, rmsd)\n    plt.xlabel('Time (ps)')\n    plt.ylabel('RMSD (nm)')\n    plt.title('RMSD During Simulation')\n    plt.show()\n\n# Check production trajectory\nplot_rmsd_realtime(\n    \"output/GMX_PROLIG_MD/prod/md.xtc\",\n    \"output/GMX_PROLIG_MD/prod/md.tpr\"\n)\n</code></pre>"},{"location":"user-guide/running-simulations/#simulation-parameters","title":"Simulation Parameters","text":""},{"location":"user-guide/running-simulations/#understanding-mdp-files","title":"Understanding MDP Files","text":"<p>PRISM generates optimized MDP files for each stage:</p>"},{"location":"user-guide/running-simulations/#energy-minimization-emmdp","title":"Energy Minimization (<code>em.mdp</code>)","text":"<pre><code>integrator = steep        ; Steepest descent\nemtol = 200.0            ; Convergence criterion\nnsteps = 10000           ; Maximum steps\n</code></pre>"},{"location":"user-guide/running-simulations/#nvt-equilibration-nvtmdp","title":"NVT Equilibration (<code>nvt.mdp</code>)","text":"<pre><code>integrator = md          ; Molecular dynamics\ndt = 0.002              ; 2 fs timestep\nnsteps = 250000         ; 500 ps total\ntcoupl = V-rescale      ; Temperature coupling\nref_t = 310             ; Target temperature (K)\n</code></pre>"},{"location":"user-guide/running-simulations/#npt-equilibration-nptmdp","title":"NPT Equilibration (<code>npt.mdp</code>)","text":"<pre><code>pcoupl = C-rescale      ; Pressure coupling\nref_p = 1.0            ; Target pressure (bar)\ntau_p = 1.0            ; Pressure coupling time\n</code></pre>"},{"location":"user-guide/running-simulations/#production-mdmdp","title":"Production (<code>md.mdp</code>)","text":"<pre><code>nsteps = 250000000      ; 500 ns\nnstxout-compressed = 250000  ; Save every 500 ps\n</code></pre>"},{"location":"user-guide/running-simulations/#modifying-parameters","title":"Modifying Parameters","text":"<pre><code># Modify MDP files before running\ndef modify_mdp(mdp_file, parameters):\n    \"\"\"Modify MDP parameters\"\"\"\n\n    with open(mdp_file, 'r') as f:\n        lines = f.readlines()\n\n    # Update parameters\n    new_lines = []\n    for line in lines:\n        for param, value in parameters.items():\n            if line.startswith(param):\n                line = f\"{param} = {value}\\n\"\n        new_lines.append(line)\n\n    with open(mdp_file, 'w') as f:\n        f.writelines(new_lines)\n\n# Example: Longer production run\nmodify_mdp(\n    \"output/mdps/md.mdp\",\n    {\"nsteps\": 500000000}  # 1 microsecond\n)\n</code></pre>"},{"location":"user-guide/running-simulations/#restarting-simulations","title":"Restarting Simulations","text":""},{"location":"user-guide/running-simulations/#from-checkpoint","title":"From Checkpoint","text":"<pre><code># GROMACS restart from checkpoint\ncd output/GMX_PROLIG_MD/prod\ngmx mdrun -s md.tpr -cpi md.cpt -deffnm md -append\n</code></pre> <pre><code># Python restart\nsim = prism.model(\"output/GMX_PROLIG_MD\")\nresults = sim.run(\n    engine=\"gmx\",\n    continue_from=\"npt\"  # Continue from NPT checkpoint\n)\n</code></pre>"},{"location":"user-guide/running-simulations/#extending-simulations","title":"Extending Simulations","text":"<pre><code># Extend by 100 ns\ngmx convert-tpr -s prod/md.tpr -extend 100000 -o prod/md_extended.tpr\ngmx mdrun -s prod/md_extended.tpr -cpi prod/md.cpt -deffnm prod/md -append\n</code></pre>"},{"location":"user-guide/running-simulations/#multi-simulation-workflows","title":"Multi-Simulation Workflows","text":""},{"location":"user-guide/running-simulations/#batch-processing","title":"Batch Processing","text":"<pre><code>import prism\nfrom pathlib import Path\n\n# Run multiple systems\nsystems = Path(\"systems\").glob(\"*/GMX_PROLIG_MD\")\n\nfor system_dir in systems:\n    try:\n        sim = prism.model(str(system_dir))\n        results = sim.run(engine=\"gmx\")\n        print(f\"\u2713 Completed: {system_dir.parent.name}\")\n    except Exception as e:\n        print(f\"\u2717 Failed: {system_dir.parent.name}: {e}\")\n</code></pre>"},{"location":"user-guide/running-simulations/#parallel-simulations","title":"Parallel Simulations","text":"<pre><code>from concurrent.futures import ProcessPoolExecutor\nimport prism\n\ndef run_simulation(gmx_dir):\n    \"\"\"Run single simulation\"\"\"\n    sim = prism.model(gmx_dir)\n    return sim.run(engine=\"gmx\")\n\n# Run 4 simulations in parallel\ngmx_dirs = [\n    \"system1/GMX_PROLIG_MD\",\n    \"system2/GMX_PROLIG_MD\",\n    \"system3/GMX_PROLIG_MD\",\n    \"system4/GMX_PROLIG_MD\"\n]\n\nwith ProcessPoolExecutor(max_workers=4) as executor:\n    results = list(executor.map(run_simulation, gmx_dirs))\n</code></pre>"},{"location":"user-guide/running-simulations/#replica-exchange","title":"Replica Exchange","text":"<pre><code># Setup for REMD (manual process)\ntemperatures = [300, 310, 320, 330, 340, 350]\n\nfor i, temp in enumerate(temperatures):\n    # Modify MDP for each temperature\n    modify_mdp(\n        f\"replica_{i}/mdps/md.mdp\",\n        {\"ref_t\": temp}\n    )\n\n    # Build TPR files\n    os.system(f\"\"\"\n        cd replica_{i}/GMX_PROLIG_MD\n        gmx grompp -f ../mdps/md.mdp -c npt.gro \\\n                   -p topol.top -o md_{i}.tpr\n    \"\"\")\n\n# Run REMD\nos.system(f\"\"\"\n    mpirun -np {len(temperatures)} gmx_mpi mdrun -multidir replica_* \\\n           -deffnm md -replex 1000\n\"\"\")\n</code></pre>"},{"location":"user-guide/running-simulations/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guide/running-simulations/#hardware-detection","title":"Hardware Detection","text":"<pre><code>import subprocess\nimport torch  # If available\n\ndef detect_hardware():\n    \"\"\"Detect available hardware\"\"\"\n\n    info = {}\n\n    # CPU cores\n    import multiprocessing\n    info['cpu_cores'] = multiprocessing.cpu_count()\n\n    # GPU detection\n    try:\n        result = subprocess.run(\n            ['nvidia-smi', '--query-gpu=name,memory.total', \n             '--format=csv,noheader'],\n            capture_output=True, text=True\n        )\n        if result.returncode == 0:\n            gpus = result.stdout.strip().split('\\n')\n            info['gpus'] = gpus\n    except:\n        info['gpus'] = []\n\n    # CUDA availability (if torch installed)\n    try:\n        info['cuda_available'] = torch.cuda.is_available()\n        info['cuda_devices'] = torch.cuda.device_count()\n    except:\n        pass\n\n    return info\n\nhardware = detect_hardware()\nprint(f\"Hardware: {hardware}\")\n\n# Optimize based on hardware\nif hardware.get('gpus'):\n    # Use GPU\n    sim.run(engine=\"gmx\", gpu_id=0, ntomp=hardware['cpu_cores']//2)\nelse:\n    # CPU only\n    sim.run(engine=\"gmx\", ntomp=hardware['cpu_cores'])\n</code></pre>"},{"location":"user-guide/running-simulations/#performance-tuning","title":"Performance Tuning","text":"<pre><code># Benchmark different settings\nimport time\n\nsettings = [\n    {\"ntomp\": 8, \"gpu_id\": 0},\n    {\"ntomp\": 10, \"gpu_id\": 0},\n    {\"ntomp\": 12, \"gpu_id\": 0},\n    {\"ntomp\": 15, \"gpu_id\": 0},\n]\n\nfor setting in settings:\n    start = time.time()\n\n    # Run short test\n    sim.run(\n        engine=\"gmx\",\n        stages=[\"em\"],\n        **setting\n    )\n\n    elapsed = time.time() - start\n    print(f\"Settings {setting}: {elapsed:.2f} seconds\")\n</code></pre>"},{"location":"user-guide/running-simulations/#performance-metrics","title":"Performance Metrics","text":"<pre><code>def parse_performance(log_file):\n    \"\"\"Extract performance metrics from GROMACS log\"\"\"\n\n    with open(log_file) as f:\n        lines = f.readlines()\n\n    for line in lines:\n        if 'Performance:' in line:\n            # Extract ns/day\n            parts = line.split()\n            ns_per_day = float(parts[1])\n            hours_per_ns = float(parts[3])\n            return {\n                'ns_per_day': ns_per_day,\n                'hours_per_ns': hours_per_ns\n            }\n\n    return None\n\n# Check performance\nperf = parse_performance(\"output/GMX_PROLIG_MD/prod/md.log\")\nif perf:\n    print(f\"Performance: {perf['ns_per_day']:.2f} ns/day\")\n\n    # Estimate completion time\n    total_ns = 500  # Target simulation length\n    days_needed = total_ns / perf['ns_per_day']\n    print(f\"Estimated time for 500 ns: {days_needed:.1f} days\")\n</code></pre>"},{"location":"user-guide/running-simulations/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/running-simulations/#common-issues","title":"Common Issues","text":""},{"location":"user-guide/running-simulations/#cuda-error","title":"\"CUDA Error\"","text":"<pre><code># Fallback to CPU if GPU fails\ntry:\n    results = sim.run(engine=\"openmm\", platform=\"CUDA\")\nexcept:\n    print(\"GPU failed, using CPU\")\n    results = sim.run(engine=\"openmm\", platform=\"CPU\")\n</code></pre>"},{"location":"user-guide/running-simulations/#atoms-moving-too-fast","title":"\"Atoms moving too fast\"","text":"<pre><code># Reduce time step\nmodify_mdp(\"mdps/md.mdp\", {\"dt\": 0.001})  # 1 fs instead of 2 fs\n\n# Or increase equilibration\nmodify_mdp(\"mdps/nvt.mdp\", {\"nsteps\": 500000})  # Longer NVT\n</code></pre>"},{"location":"user-guide/running-simulations/#checkpoint-file-corrupted","title":"\"Checkpoint file corrupted\"","text":"<pre><code># Start fresh from last good structure\ngmx grompp -f ../mdps/md.mdp -c npt.gro -p topol.top -o md_new.tpr\ngmx mdrun -s md_new.tpr -deffnm md_new\n</code></pre>"},{"location":"user-guide/running-simulations/#out-of-memory","title":"\"Out of memory\"","text":"<pre><code># Reduce trajectory output frequency\nmodify_mdp(\n    \"mdps/md.mdp\",\n    {\"nstxout-compressed\": 500000}  # Save less frequently\n)\n\n# Or compress existing trajectory\nos.system(\"gmx trjconv -f md.xtc -o md_compressed.xtc -dt 10\")\n</code></pre>"},{"location":"user-guide/running-simulations/#analysis-during-simulation","title":"Analysis During Simulation","text":""},{"location":"user-guide/running-simulations/#on-the-fly-analysis","title":"On-the-fly Analysis","text":"<pre><code>import mdtraj as md\nimport numpy as np\n\ndef analyze_while_running(gmx_dir):\n    \"\"\"Analyze trajectory while simulation runs\"\"\"\n\n    traj_file = f\"{gmx_dir}/prod/md.xtc\"\n    tpr_file = f\"{gmx_dir}/prod/md.tpr\"\n\n    if not os.path.exists(traj_file):\n        print(\"No trajectory yet\")\n        return\n\n    # Load current trajectory\n    traj = md.load(traj_file, top=tpr_file)\n\n    # Quick analyses\n    print(f\"Frames: {traj.n_frames}\")\n    print(f\"Time: {traj.time[-1]} ps\")\n\n    # RMSD\n    rmsd = md.rmsd(traj, traj[0])\n    print(f\"Current RMSD: {rmsd[-1]:.3f} nm\")\n\n    # Radius of gyration\n    rg = md.compute_rg(traj)\n    print(f\"Current Rg: {rg[-1]:.3f} nm\")\n\n    return {\n        'frames': traj.n_frames,\n        'time': traj.time[-1],\n        'rmsd': rmsd[-1],\n        'rg': rg[-1]\n    }\n</code></pre>"},{"location":"user-guide/running-simulations/#energy-monitoring","title":"Energy Monitoring","text":"<pre><code># Extract energies during run\ngmx energy -f prod/md.edr -o energy.xvg &lt;&lt; EOF\nPotential\nKinetic-En.\nTotal-Energy\nTemperature\nPressure\nEOF\n\n# Plot with xmgrace or Python\n</code></pre>"},{"location":"user-guide/running-simulations/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/running-simulations/#1-always-equilibrate","title":"1. Always Equilibrate","text":"<p>Never skip equilibration stages: - EM removes clashes - NVT stabilizes temperature - NPT stabilizes density</p>"},{"location":"user-guide/running-simulations/#2-check-convergence","title":"2. Check Convergence","text":"<p>Monitor key properties: <pre><code># Check if equilibrated\ndef check_equilibration(edr_file):\n    \"\"\"Check if system is equilibrated\"\"\"\n\n    os.system(f\"\"\"\n        echo \"Temperature Pressure Density\" | \n        gmx energy -f {edr_file} -o check.xvg\n    \"\"\")\n\n    # Load and analyze\n    data = np.loadtxt(\"check.xvg\", comments=['#', '@'])\n\n    # Check last 20% is stable\n    n = len(data)\n    last_portion = data[int(0.8*n):]\n\n    temp_std = np.std(last_portion[:, 1])\n    press_std = np.std(last_portion[:, 2])\n\n    print(f\"Temperature StdDev: {temp_std:.2f} K\")\n    print(f\"Pressure StdDev: {press_std:.2f} bar\")\n\n    if temp_std &lt; 5 and press_std &lt; 100:\n        print(\"System appears equilibrated\")\n        return True\n    else:\n        print(\"System may need more equilibration\")\n        return False\n</code></pre></p>"},{"location":"user-guide/running-simulations/#3-save-checkpoints","title":"3. Save Checkpoints","text":"<pre><code># Ensure checkpoint saving\nmodify_mdp(\"mdps/md.mdp\", {\n    \"nstcheckpoint\": 1000000  # Every 2 ns\n})\n</code></pre>"},{"location":"user-guide/running-simulations/#4-use-appropriate-resources","title":"4. Use Appropriate Resources","text":"<ul> <li>GPU for nonbonded calculations</li> <li>Multiple CPUs for PME</li> <li>Balance GPU and CPU load</li> </ul>"},{"location":"user-guide/running-simulations/#5-document-everything","title":"5. Document Everything","text":"<pre><code># Save simulation metadata\nimport json\nfrom datetime import datetime\n\nmetadata = {\n    \"date\": datetime.now().isoformat(),\n    \"system\": \"protein_ligand_complex\",\n    \"engine\": \"gromacs\",\n    \"gpu\": \"RTX_3080\",\n    \"performance\": \"45 ns/day\",\n    \"parameters\": {\n        \"temperature\": 310,\n        \"pressure\": 1.0,\n        \"time\": \"500 ns\"\n    }\n}\n\nwith open(\"simulation_metadata.json\", \"w\") as f:\n    json.dump(metadata, f, indent=2)\n</code></pre>"},{"location":"user-guide/running-simulations/#next-steps","title":"Next Steps","text":"<ul> <li>Analyze trajectories</li> <li>Understand outputs</li> <li>Advanced workflows</li> </ul>"}]}